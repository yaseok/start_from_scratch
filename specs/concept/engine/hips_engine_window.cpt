# W_HIPS:<hips_dut>에서 anse 엔진 드라이버 패키지를 설치한다
* 로컬 파일:"../NSEL/nsel_package.tar.gz"을 Device:<hips_dut>의 경로:"/tmp/nsel_package.tar.gz"로 업로드 한다
/* 로컬 파일:"data/engine/nsel_package.tar.gz"을 Device:<hips_dut>의 경로:"/tmp/nsel_package.tar.gz"로 업로드 한다
* <hips_dut>에서 "cd /tmp"를 실행한다
* <hips_dut>에서 "tar xvfz nsel_package.tar.gz"를 실행한다
* <hips_dut>에서 "cd /tmp/nsel_package/"를 실행한다
* <hips_dut>에서 "find . -name \"*`uname -r`*\" > pkgname"를 실행한다
* <hips_dut>에서 "tar xvfz `cat pkgname`"를 실행한다
* <hips_dut>에서 "cd `cat pkgname | rev | cut -c 8- | rev`"를 실행한다
* <hips_dut>에서 "./install.sh"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다

# W_HIPS:<hips_dut>에서 환경변수 업데이트한다
* <hips_dut>에서 "export PATH=$PATH:/ahnlab/anse/bin:/ahnlab/anse/script/"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다

# W_HIPS:<hips_dut>에서 anse 엔진 드라이버 패키지를 삭제한다
* <hips_dut>에서 "cd /tmp/nsel_package/"를 실행한다
* <hips_dut>에서 "find . -name \"*`uname -r`*\" > pkgname"를 실행한다
* <hips_dut>에서 "cd `cat pkgname`"를 실행한다
* <hips_dut>에서 "./uninstall.sh"를 실행한다
* <hips_dut>에서 "rm -rf /tmp/nsel_package/"를 실행한다

# W_HIPS:<hips_dut>에서 anse testsuite 패키지를 설치한다
* 로컬 파일:"../NSEL/nsel_testsuite_package.tar.gz"을 Device:<hips_dut>의 경로:"/tmp/nsel_testsuite_package.tar.gz"로 업로드 한다
/* 로컬 파일:"data/engine/nsel_testsuite_package.tar.gz"을 Device:<hips_dut>의 경로:"/tmp/nsel_testsuite_package.tar.gz"로 업로드 한다
* <hips_dut>에서 "cd /tmp"를 실행한다
* EXEC 실행 결과 코드는 "0", 결과 메시지는 ""와 같다
* <hips_dut>에서 "tar xvfz nsel_testsuite_package.tar.gz"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cd nsel_testsuite"를 실행한다
* EXEC 실행 결과 코드는 "0", 결과 메시지는 ""와 같다
* <hips_dut>에서 "./install.sh"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다

# W_HIPS:<hips_dut>에서 anse testsuite 패키지를 삭제한다
* <hips_dut>에서 "cd /tmp/nsel_testsuite"를 실행한다
* EXEC 실행 결과 코드는 "0", 결과 메시지는 ""와 같다
* <hips_dut>에서 "./uninstall.sh"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다

# W_HIPS:<hips_dut>에서 anse_mon을 데몬 모드로 실행 후 구동상태 확인한다
* <hips_dut>에서 "anse_mon -d"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* Device:<hips_dut>에서 프로세스:"anse_mon" 확인시 동작 상태가 "true"이다

# W_HIPS:<hips_dut>에서 anse_mon을 종료 후 구동상태 확인한다
* <hips_dut>에서 "anse_ctl server term"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* Device:<hips_dut>에서 프로세스:"anse_mon" 확인시 동작 상태가 "false"이다

# W_HIPS:<hips_dut>에서 엔진 드라이버를 초기화 한다
* <hips_dut>에서 "anse_ctl server load"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "anse_ctl driver load"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "anse_ctl driver init"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "anse_ctl engine init"를 실행한다
/* EXEC 실행 결과 코드는 "61"와 같다
* <hips_dut>에서 "echo $?"를 실행한다
* <hips_dut>에서 "anse_ctl driver start"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다

# W_HIPS:<hips_dut>에서 엔진 드라이버를 종료한다
* <hips_dut>에서 "anse_ctl driver stop"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "anse_ctl engine deinit"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "anse_ctl driver deinit"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "anse_ctl driver unload"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "anse_ctl server unload"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다


# W_HIPS:<hips_dut>에 엔진 테스트 환경 Initialize
* HIPS:<hips_dut>에서 anse 엔진 드라이버 패키지를 설치한다
* HIPS:<hips_dut>에서 anse testsuite 패키지를 설치한다
* HIPS:<hips_dut>에서 환경변수 업데이트한다
* HIPS:<hips_dut>에서 anse_mon을 데몬 모드로 실행 후 구동상태 확인한다
* HIPS:<hips_dut>에서 anse_mon을 종료 후 구동상태 확인한다
* HIPS:<hips_dut>에서 anse_mon을 데몬 모드로 실행 후 구동상태 확인한다
* HIPS:<hips_dut>에서 엔진 드라이버를 초기화 한다
* HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 "engine chcb json /tmp/engine_event.json" 명령을 수행한다

# W_HIPS:<hips_dut>에 엔진 테스트 환경 Finalize
* HIPS:<hips_dut>에서 엔진 드라이버를 종료한다
* HIPS:<hips_dut>에서 anse_mon을 종료 후 구동상태 확인한다
* HIPS:<hips_dut>에서 anse 엔진 드라이버 패키지를 삭제한다
* HIPS:<hips_dut>에서 anse testsuite 패키지를 삭제한다

# W_HIPS:<hips_dut>에서 엔진의 구동모드를 <mode>로 변경한다
* Json Name:"policy_hips_agent"을 File:"data/engine/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"의 XPATH:"policy_hips_agent.engine.mode"의 값을 String value:<mode>로 변경한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "anse_ctl -j engine apply /tmp/policy_hips_agent.json"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

# W_HIPS:<hips_dut>에서 엔진의 구동모드 확인시 <mode>이다
* <hips_dut>에서 "anse_ctl -j driver runmode get"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* EXEC 실행 결과의 Json XPath:"data"의 값은 String value:<mode>와 같다

# W_HIPS:<hips_dut>에서 엔진의 Oversubscription 사용 여부를 <value>로 변경한다
* Json Name:"policy_hips_agent"의 XPATH:"policy_hips_agent.engine.oversubscription"의 값을 Boolean value:<value>로 변경한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "anse_ctl -j engine apply /tmp/policy_hips_agent.json"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

# W_HIPS:<hips_dut>에서 엔진의 Oversubscription 사용 여부를 확인시 <value>이다
* <hips_dut>에서 "anse_ctl -j driver oversub get"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* EXEC 실행 결과의 Json XPath:"data"의 값은 String value:<value>와 같다

// 기본 설정
# W_HIPS:<hips_dut>에 IPS 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"c:/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"c:/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"c:/tmp/signature_user.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"c:/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"c:/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json signature_infra.json signature_user.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

아래 wget으로 3개 파일 다운 구문이 중복된 이유는, 각 OS마다 받는 명령이 달라 STEP을 추가하는 방법보다는 모든 구문을 넣는 방법을 택함.
# W_HIPS:<hips_dut>에 NSEW 패치키를 위치시킨다.
* <hips_dut>에서 "cd c:/"를 실행한다
\* <hips_dut>에서 "rd tmp -Force"를 실행한다
\* <hips_dut>에서 "rd GeoIPCountryWhois.csv -Force"를 실행한다
\* <hips_dut>에서 "rd amd64 -Force"를 실행한다
\* <hips_dut>에서 "rd amd64.zip -Force"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/GeoIPCountryWhois.csv -OutFile c:\GeoIPCountryWhois.csv"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/anse_mon.ps1 -OutFile c:\anse_mon.ps1"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/amd64.zip -OutFile c:\amd64.zip"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/GeoIPCountryWhois.csv"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/anse_mon.ps1"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/amd64.zip"를 실행한다
* <hips_dut>에서 "unzip -o ./amd64.zip"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 "copy GeoIPCountryWhois.csv /amd64/GeoIPCountryWhois.csv"를 실행한다
* <hips_dut>에서 "copy anse_mon.ps1 /amd64/anse_mon.ps1"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 "cd c:/"를 실행한다
* <hips_dut>에서 "mv amd64 tmp"를 실행한다
* 3초 동안 대기

# W_HIPS:<hips_dut>에 NSEW 패치키를 위치시킨다_win2008
* <hips_dut>에서 "cd c:/"를 실행한다
* <hips_dut>에서 "rd amd64.zip -Force"를 실행한다
* <hips_dut>에서 "rd amd64 -Force"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/GeoIPCountryWhois.csv"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/anse_mon.ps1"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/amd64.zip"를 실행한다
* <hips_dut>에서 "unzip ./amd64.zip"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 "copy GeoIPCountryWhois.csv /amd64/GeoIPCountryWhois.csv"를 실행한다
* <hips_dut>에서 "copy anse_mon.ps1 /amd64/anse_mon.ps1"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 "cd c:/"를 실행한다
* <hips_dut>에서 "mv amd64 tmp"를 실행한다
* 3초 동안 대기

# W_HIPS:<hips_dut>에 NSEW를 설치한다.
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl server term"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 anse_mon를 실행한다
* 3초 동안 대기
/* <hips_dut>에서 "./anse_mon.ps1"를 실행한다
* <hips_dut>에서 "./anse_ctl server load anse.dll"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 "./anse_ctl driver install"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 "./anse_ctl driver load"를 실행한다
* <hips_dut>에서 "./anse_ctl driver init"를 실행한다
* <hips_dut>에서 "./anse_ctl engine init"를 실행한다
* 5초 동안 대기
* <hips_dut>에서 "./anse_ctl driver start"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 "./anse_ctl engine getversion"를 실행한다

# W_HIPS:<hips_dut>에 NSEW를 pcap 모드로 구동한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_mon -m pcap -v"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 "./anse_ctl server load anse.dll"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 "./anse_ctl engine init"를 실행한다
* 3초 동안 대기
* <hips_dut>에서 "./anse_ctl engine getversion"를 실행한다

# W_HIPS:<hips_dut>에 방화벽 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"false"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/nsew/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/nsew/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"/tmp/signature_user.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/nsew/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.rule.[*].sip"의 값을 String value:"[\"192.168.181.253\"]"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json signature_infra.json signature_user.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* 3초 동안 대기
/* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
/ OS마다 true일 때 rcode 값이 달라 일단 제외

# W_HIPS:<hips_dut>에 방화벽 seq테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"false"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/nsew/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/nsew/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"/tmp/signature_user.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/nsew/policy_fw.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.rule.[*].sip"의 값을 String value:"[\"192.168.181.253\"]"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_fw.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json signature_infra.json signature_user.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_fw.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

# W_HIPS:<hips_dut>에 방화벽 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용함
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"false"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/nsew/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/nsew/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"/tmp/signature_user.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/nsew/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.rule.[*].sip"의 값을 String value:"[\"192.168.181.253\"]"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json signature_infra.json signature_user.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

# W_HIPS:<hips_dut>에 방화벽 테스트를 위한 설정 파일을 적용한다.
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:"c:/tmp/policy_hips_firewall.json"을 적용한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

# W_HIPS:<hips_dut>에 방화벽 테스트를 위한 설정 파일을 적용한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:"c:/tmp/policy_fw.json"을 적용한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

# W_HIPS:<hips_dut>에 방화벽 차단 국가 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"false"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/nsew/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/nsew/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"/tmp/signature_user.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/nsew/policy_fw.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_fw.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json GeoIPCountryWhois.csv"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json signature_infra.json signature_user.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_fw.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

# W_HIPS:<hips_dut>에 에이전트 설정 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/nsew/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/nsew/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"/tmp/signature_user.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/nsew/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json signature_infra.json signature_user.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

# W_HIPS:<hips_dut>에 사용자 정의 국가 에이전트 설정 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/nsew/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/nsew/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"/tmp/signature_user.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/nsew/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.block_nation.[*].nation"의 값을 String value:"KR"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json signature_infra.json signature_user.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다


// 설정 변경
# W_HIPS:<hips_dut>에서 엔진의 설정을 변경하고 적용한다 (Boolean Type, <menu>, <xpath>, <path_local>, <path_remote_1>, <path_remote_2>, <value>)
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>을 Load해서 생성한다
* Json Name:<menu>의 XPATH:<xpath>의 값을 Boolean value:<value>로 변경한다
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:<path_remote_2>을 적용한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에서 엔진의 설정을 변경하고 적용한다 (String Type, <menu>, <xpath>, <path_local>, <path_remote_1>, <path_remote_2>, <value>)
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>을 Load해서 생성한다
* Json Name:<menu>의 XPATH:<xpath>의 값을 String value:<value>로 변경한다
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:<path_remote_2>을 적용한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에서 엔진의 설정을 변경하고 적용했을 때 적용 실패한다 (String Type, <menu>, <xpath>, <path_local>, <path_remote_1>, <path_remote_2>, <value>)
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>을 Load해서 생성한다
* Json Name:<menu>의 XPATH:<xpath>의 값을 String value:<value>로 변경한다
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>에 저장한다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:<path_remote_2>을 적용한다
/* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같지 않다
/ OS마다 true일 때 rcode 값이 달라 일단 제외

/ 엔진테스트에서 정책만 적용하는 용, 밑에꺼는 새로 만드는중
# W_HIPS:<hips_dut>에서 로그 초기화
\* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>을 Load해서 생성한다
\* Json Name:<menu>의 XPATH:<xpath>의 값을 String value:<value>로 변경한다
\* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>에 저장한다
\* <hips_dut>에서 "cd c:/tmp"를 실행한다
\* HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:<path_remote_2>을 적용한다
\* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에서 엔진의 방화벽 설정을 변경하고 적용한다 (Object Type, <menu>, <xpath>, <path_local>, <path_remote_1>, <path_remote_2>, <value>)
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>을 Load해서 생성한다
* Json Name:<menu>의 XPATH:<xpath>의 값을 Object value:<value>로 부분 업데이트한다
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:<path_remote_2>을 적용한다
* 1초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* Json Name:"policy_hips_agent_user_nation"을 File:"data/engine/policy_hips_agent_user_nation.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent_user_nation"을 Device:<hips_dut>의 File:"c:/tmp/policy_hips_agent_user_nation.json"에 저장한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent_user_nation.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "c:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

/ 밑에꺼는 새로 만드는중
# W_HIPS:<hips_dut>에서 엔진의 방화벽 설정을 변경하고 적용함 (Object Type, <menu>, <xpath>, <path_local>, <path_remote_1>, <path_remote_2>, <value>)
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>을 Load해서 생성한다
* Json Name:<menu>의 XPATH:<xpath>의 값을 Object value:<value>로 부분 업데이트한다
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:<path_remote_2>을 적용한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/policy_hips_firewall_direction.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"c:/tmp/policy_hips_firewall_direction.json"에 저장한다
* HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:"c:/tmp/policy_hips_firewall_direction.json"을 적용한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에서 엔진의 에이전트 설정을 변경하고 적용한다 (Object Type, <menu>, <xpath>, <path_local>, <path_remote_1>, <path_remote_2>, <value>)
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>을 Load해서 생성한다
* Json Name:<menu>의 XPATH:<xpath>의 값을 Object value:<value>로 부분 업데이트한다
* Json Name:<menu>을 Device:<hips_dut>의 File:<path_remote_1>에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:<path_remote_2>을 적용한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에서 에이전트 설정을 변경하고 확인한다 (<anse_cmd_config>, <anse_cmd_result>, <result_value>)
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 <anse_cmd_config> 명령을 수행한다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 <anse_cmd_result> 명령을 수행한다
* EXEC 실행 결과의 Json XPath:"data"의 값은 String value:<result_value>와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에서 엔진의 설정을 확인한다 (Object Type, <anse_cmd>, <result_path>, <result_value>)
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 <anse_cmd> 명령을 수행한다
* EXEC 실행 결과의 Json XPath:<result_path>의 값은 Ignore Type조건으로 value:<result_value>와 같다

# W_HIPS:<hips_dut>에서 엔진의 설정을 확인한다 (Array Type, <anse_cmd>, <result_path>, <result_key_1>, <result_key_2>, <result_value_1>, <result_value_2>, <result_keytype_1>, <result_keytype_2>)
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 <anse_cmd> 명령을 수행한다
* 3초 동안 대기
* Json Object:"resultcheck"를 생성한다
|key    |type   |value  |
|<result_key_1>|<result_keytype_1>|<result_value_1>|
|<result_key_2>|<result_keytype_2>|<result_value_2>|
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:<result_path>의 값은 Object value:"resultcheck"를 포함한다

# W_HIPS:<hips_dut>에서 엔진의 설정을 확인함 (Array Type, <anse_cmd>, <result_path>, <result_key_1>, <result_key_2>, <result_value_1>, <result_value_2>, <result_keytype_1>, <result_keytype_2>)
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j driver oversub get"를 실행한다 
* Json Object:"resultcheck"를 생성한다
|key    |type   |value  |
|<result_key_1>|<result_keytype_1>|<result_value_1>|
|<result_key_2>|<result_keytype_2>|<result_value_2>|
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:<result_path>의 값은 Object value:"resultcheck"를 포함한다


// 이벤트 로그 확인
# W_HIPS:<hips_dut>에서 엔진의 이벤트 로그를 확인한다 (<log_key_1>, <log_keytype_1>, <log_value_1>, <log_key_2>, <log_keytype_2>, <log_value_2>, <log_key_3>, <log_keytype_3>, <log_value_3>)
* <hips_dut>에서 "Get-Content -Path c:/tmp/engine_event.json -TotalCount 1"를 실행한다
* 3초 동안 대기
* Json Object:"resultcheck"를 생성한다
|key    |type   |value  |
|<log_key_1>|<log_keytype_1>|<log_value_1>|
|<log_key_2>|<log_keytype_2>|<log_value_2>|
|<log_key_3>|<log_keytype_3>|<log_value_3>|
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"\"event data\".[*]"의 값은 Object value:"resultcheck"를 포함한다

# W_HIPS:<hips_dut>에서 엔진의 이벤트 로그를 확인한다 (<logcheck>, <log_key_1>, <log_keytype_1>, <log_value_1>, <log_key_2>, <log_keytype_2>, <log_value_2>, <log_key_3>, <log_keytype_3>, <log_value_3>)
* <hips_dut>에서 "Get-Content -Path c:/tmp/engine_event.json -TotalCount 1"를 실행한다
* 3초 동안 대기
* Json Object:"resultcheck"를 생성한다
|key    |type   |value  |
|<log_key_1>|<log_keytype_1>|<log_value_1>|
|<log_key_2>|<log_keytype_2>|<log_value_2>|
|<log_key_3>|<log_keytype_3>|<log_value_3>|
* 3초 동안 대기
* 확인 조건: <logcheck>, 조건이 0 이면 Json Xpath:"\"event data\".[*]"의 값이 "resultcheck"를 포함하는지 확인하고 1 이면 값이 ""임을 확인한다

# W_HIPS:<hips_dut>에서 엔진의 국가 IP 방화벽 이벤트 로그를 확인한다 (<logcheck>, <log_key_1>, <log_keytype_1>, <log_value_1>, <log_key_2>, <log_keytype_2>, <log_value_2>, <log_key_3>, <log_keytype_3>, <log_value_3>)
* <hips_dut>에서 "Get-Content -Path c:/tmp/engine_event.json -TotalCount 1"를 실행한다
* 3초 동안 대기
* Json Object:"resultcheck"를 생성한다
|key    |type   |value  |
|<log_key_1>|<log_keytype_1>|<log_value_1>|
|<log_key_2>|<log_keytype_2>|<log_value_2>|
|<log_key_3>|<log_keytype_3>|<log_value_3>|
* 3초 동안 대기
* 확인 조건: <logcheck>, 조건이 0 이면 Json Xpath:"\"event data\".[*]"의 값이 "resultcheck"를 포함하는지 확인하고 1 이면 값이 ""임을 확인한다

# W_HIPS:<hips_dut>에서 엔진의 이벤트 로그를 확인한다 ps Automation (<logcheck>, <log_key_1>, <log_keytype_1>, <log_value_1>, <log_key_2>, <log_keytype_2>, <log_value_2>, <log_key_3>, <log_keytype_3>, <log_value_3>, <log_file>)
\* <hips_dut>에서 "Get-Content -Path c:/tmp/<log_file>.json -TotalCount 1"를 실행한다
* 3초 동안 대기
* Json Object:"resultcheck"를 생성한다
|key    |type   |value  |
|<log_key_1>|<log_keytype_1>|<log_value_1>|
|<log_key_2>|<log_keytype_2>|<log_value_2>|
|<log_key_3>|<log_keytype_3>|<log_value_3>|
* 3초 동안 대기
* 확인 조건: <logcheck>, 조건이 0 이면 Json Xpath:"\"event data\".[*]"의 값이 "resultcheck"를 포함하는지 확인하고 1 이면 값이 ""임을 확인한다


# W_HIPS:<hips_dut>에서 엔진의 방화벽 정책 설정을 확인한다 (<anse_cmd>, <result_msg>)
* HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 <anse_cmd> 명령을 수행한다
* EXEC 실행 결과 메시지는 <result_msg>와 같다

# W_HIPS:<devicename>에 국가 DB 방화벽 테스트를 위한 정책을 설정 및 적용한다 (<user_nation>, <user_nation_ip>, <internal_ip>, <policy_enable>, <nation1>, <nation2>, <nation_direction1>, <nation_direction2>, <nation_description1>, <nation_description2>)
\* <devicename>에서 "policy_agent" 설정파일 "/var/policy/policy_agent.json" 정책 "user_nation":"0"의 string type 설정 "code"을 <user_nation>로 변경을 한다 xpath는 "body.policy_hips_agent.user_nation.[0].code" 이다
\* <devicename>에서 "policy_agent" 설정파일 "/var/policy/policy_agent.json" 정책 "user_nation":"0"의 array type 설정 "ip"을 <user_nation_ip>로 변경을 한다 xpath는 "body.policy_hips_agent.user_nation.[0].ip" 이다
\* <devicename>에서 "policy_agent" 설정파일 "/var/policy/policy_agent.json" 정책 "internal_network":"0"의 array type 설정 "ip"을 <internal_ip>로 변경을 한다 xpath는 "body.policy_hips_agent.internal_network.[0].ip" 이다
* <devicename>에서 "policy_fw" 설정파일 "/tmp/policy_fw.json" 사용여부를 <policy_enable>로 한다 xpath는 "policy_hips_firewall.enable" 이다
* <devicename>에서 "policy_fw" 설정파일 "/tmp/policy_fw.json" 정책 "block_nation":"0"의 string type 설정 "nation"을 <nation1>로 변경을 한다 xpath는 "policy_hips_firewall.block_nation.[0].nation" 이다
\* <devicename>에서 "policy_fw" 설정파일 "/tmp/policy_fw.json" 정책 "block_nation":"0"의 string type 설정 "direction"을 <nation_direction1>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[0].direction" 이다
\* <devicename>에서 "policy_fw" 설정파일 "/tmp/policy_fw.json" 정책 "block_nation":"0"의 string type 설정 "description"을 <nation_description1>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[0].description" 이다
\* <devicename>에서 "policy_fw" 설정파일 "/tmp/policy_fw.json" 정책 "block_nation":"1"의 string type 설정 "nation"을 <nation2>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[1].nation" 이다
\* <devicename>에서 "policy_fw" 설정파일 "/var/policy/policy_fw.json" 정책 "block_nation":"1"의 string type 설정 "direction"을 <nation_direction2>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[1].direction" 이다
\* <devicename>에서 "policy_fw" 설정파일 "/var/policy/policy_fw.json" 정책 "block_nation":"1"의 string type 설정 "description"을 <nation_description2>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[1].description" 이다
\* <devicename>에서 "policy_fw" 설정파일 "/var/policy/policy_fw.json" 정책 "block_nation":"2"의 string type 설정 "nation"을 <user_nation>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[2].nation" 이다
\* <devicename>에서 "policy_fw" 설정파일 "/var/policy/policy_fw.json" 정책 "block_nation":"2"의 string type 설정 "direction"을 <nation_direction2>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[2].direction" 이다
\* <devicename>에서 "policy_fw" 설정파일 "/var/policy/policy_fw.json" 정책 "block_nation":"2"의 string type 설정 "description"을 <nation_description2>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[2].description" 이다
\* <devicename>에서 "policy_agent" 정책 암호화 CLI:"../exec.sh ./encrypt enc /var/policy/policy_agent.json"를 한다
\* <devicename>에서 "policy_agent" 정책 적용 CLI:"../exec.sh ./hipstest set policy agent /var/policy/policy_agent.json.enc"을 한다
\* <devicename>에서 "policy_fw" 정책 암호화 CLI:"../exec.sh ./encrypt enc /var/policy/policy_fw.json"를 한다
\* <devicename>에서 "policy_fw" 정책 적용 CLI:"../exec.sh ./hipstest set policy fw /var/policy/policy_fw.json.enc"을 한다
\* <devicename>에서 "cd /usr/local/ahnlab/chipsl/log"를 실행한다
\* <devicename>에서 "event=$(ls |grep fw |head -n 1)"를 실행한다
\* <devicename>에서 "rm -rf $event"를 실행한다


# <devicename>에서 <policyname> 설정파일 <policyfile> 정책 rule:<rule_name>을 action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id>, protocol:<protocol>, sip:<sip>, dip:<dip>, sport:<sport>, dport:<dport>, nation:<nation> 로 변경을 한다 xpath는 <xpathval1> 이다
* Json Name:<policyname>을 Device:<devicename>의 File:<policyfile>을 Load해서 생성한다
* Json Name:"changeobj"를 Object Table을 통해 생성한다
    |key    |type   |value |
    |-------|-------|------|
    |action    |string|<action>|
    |enable    |boolean|<rule_enable>|
    |direction    |string|<rule_direction>|
    |seq_id    |number|<seq_id>|
    |protocol    |string|<protocol>|
    |sip    |array|<sip>|
    |dip    |array|<dip>|
    |sport    |array|<sport>|
    |dport    |array|<dport>|
    |nation    |string|<nation>|

* Json Name:<policyname>을 보여준다
* Json Name:<policyname>의 XPATH:<xpathval1>의 값이 String:<rule_name>인 상위 Path의 값을 Object value:"changeobj"로 부분 업데이트한다
* Json Name:<policyname>을 보여준다
* Json Name:<policyname>을 Device:<devicename>의 File:<policyfile>에 저장한다

# W_HIPS:<devicename>에 국가 DB 방화벽 테스트를 위한 정책을 설정 및 적용한다 (<policy_enable>, <nation1>, <nation_direction1>)
* <devicename>에서 "policy_fw" 설정파일 "/tmp/policy_fw.json" 사용여부를 <policy_enable>로 한다 xpath는 "policy_hips_firewall.enable" 이다
* <devicename>에서 "policy_fw" 설정파일 "/tmp/policy_fw.json" 정책 "block_nation":"0"의 string type 설정 "nation"을 <nation1>로 변경을 한다 xpath는 "policy_hips_firewall.block_nation.[0].nation" 이다
* <devicename>에서 "policy_fw" 설정파일 "/tmp/policy_fw.json" 정책 "block_nation":"0"의 string type 설정 "direction"을 <nation_direction1>로 변경을 한다 xpath는 "policy_hips_firewall.block_nation.[0].direction" 이다


WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
WINDOWS 2008 R2 SP 1

# W_HIPS:<hips_dut>에 방화벽 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다-WINDOWS 2008
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"false"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/nsew/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/nsew/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"/tmp/signature_user.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/nsew/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.rule.[*].sip"의 값을 String value:"[\"192.168.181.254\"]"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"C:/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json signature_infra.json signature_user.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
NSEW 시그니처 신규 옵션
# W_HIPS:<hips_dut>에 IPS 신규 시그니처 옵션 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/new_sig/policy_hips_ips_mgmt_new_sig.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"c:/tmp/policy_hips_ips_mgmt_new_sig.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/nsew/new_sig/signature_infra_new_detect.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"c:/tmp/signature_infra_new_detect.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/nsew/new_sig/signature_infra_new_detect_02.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"c:/tmp/signature_infra_new_detect_02.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/nsew/new_sig/signature_infra_new_non_detect.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"c:/tmp/signature_infra_new_non_detect.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"c:/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"c:/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 "engine apply policy_hips_agent.json" 명령을 수행한다
/* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* 3초 동안 대기
/* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 "engine apply policy_hips_ips_mgmt_new_sig.json signature_infra_new_detect.json" 명령을 수행한다
/* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt_new_sig.json signature_infra_new_detect.json"를 실행한다
* 3초 동안 대기
/* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 "engine apply policy_hips_firewall.json" 명령을 수행한다
/* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* 3초 동안 대기
/* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

# W_HIPS:<hips_dut>에서 엔진의 설정을 변경하고 적용한다_신규 시그니처 옵션 (<path_remote_2>)
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* W_HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:<path_remote_2>을 적용한다
* 3초 동안 대기
/* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
/ OS마다 true일 때 rcode 값이 달라 일단 제외
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에서 엔진의 시그니처 옵션 이벤트 로그를 확인한다 (<logcheck>, <log_key_1>, <log_keytype_1>, <log_value_1>, <log_key_2>, <log_keytype_2>, <log_value_2>, <log_key_3>, <log_keytype_3>, <log_value_3>)
/* <hips_dut>에서 "Get-Content -Path c:/tmp/engine_event.json -TotalCount 1"를 실행한다
* <hips_dut>에서 "Get-Content -Path c:/tmp/engine_event.json"를 실행한다
* 3초 동안 대기
* Json Object:"resultcheck"를 생성한다
|key    |type   |value  |
|<log_key_1>|<log_keytype_1>|<log_value_1>|
|<log_key_2>|<log_keytype_2>|<log_value_2>|
|<log_key_3>|<log_keytype_3>|<log_value_3>|
* 3초 동안 대기
* 확인 조건: <logcheck>, 조건이 0 이면 Json Xpath:"\"event data\".[*]"의 값이 "resultcheck"를 포함하는지 확인하고 1 이면 값이 ""임을 확인한다

# W_HIPS:<hips_dut>에서 엔진의 시그니처 옵션 이벤트 로그를 확인한다2 (<logcheck>, <log_key_1>, <log_keytype_1>, <log_value_1>, <log_key_2>, <log_keytype_2>, <log_value_2>, <log_key_3>, <log_keytype_3>, <log_value_3>)
* <hips_dut>에서 "Get-Content -Path c:/tmp/engine_event.json -TotalCount 1"를 실행한다
* 3초 동안 대기
* Json Object:"resultcheck"를 생성한다
|key    |type   |value  |
|<log_key_1>|<log_keytype_1>|<log_value_1>|
|<log_key_2>|<log_keytype_2>|<log_value_2>|
|<log_key_3>|<log_keytype_3>|<log_value_3>|
* 3초 동안 대기
* 확인 조건: <logcheck>, 조건이 0 이면 Json Xpath:"\"event data\".[*]"의 값이 "resultcheck"를 포함하는지 확인하고 1 이면 값이 ""임을 확인한다


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
NSEW- host sweep
# W_HIPS:<hips_dut>에 IPS Host Sweep 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_scan.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_scan.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/nsew/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_scan.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다

# W_HIPS:<hips_dut>에 Port Scan 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/nsew/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_scan.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_scan.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_scan.json"를 실행한다
* 3초 동안 대기
\* HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:"/tmp/policy_hips_port_scan.json"을 적용한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에 Port Scan 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다02
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/nsew/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/nsew/policy_scan_02.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_scan_02.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* 3초 동안 대기
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_scan_02.json"를 실행한다
* 3초 동안 대기
\* HIPS:<hips_dut>에서 anse_ctl Tool을 이용하여 엔진 설정 파일:"/tmp/policy_hips_port_scan.json"을 적용한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다


# W_HIPS:<hips_dut>에 XFF Real IPv4 차단 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"false"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"/tmp/signature_user.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/policy_hips_xff_ipv4.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_xff_ipv4.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/policy_hips_agent_xff_ipv4.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent_xff_ipv4.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent_xff_ipv4.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json /tmp/signature_infra.json /tmp/signature_user.json"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_xff_ipv4.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에서 XFF Real IP 로그를 확인한다 (<logcheck>, <log_key_1>, <log_keytype_1>, <log_value_1>, <log_key_2>, <log_keytype_2>, <log_value_2>, <log_key_3>, <log_keytype_3>, <log_value_3>)
* <hips_dut>에서 "Get-Content -Path c:/tmp/engine_event.json -TotalCount 1"를 실행한다
* Json Object:"resultcheck"를 생성한다
|key    |type   |value  |
|<log_key_1>|<log_keytype_1>|<log_value_1>|
|<log_key_2>|<log_keytype_2>|<log_value_2>|
|<log_key_3>|<log_keytype_3>|<log_value_3>|
* 확인 조건: <logcheck>, 조건이 0 이면 Json Xpath:"\"event data\".[*]"의 값이 "resultcheck"를 포함하는지 확인하고 1 이면 값이 ""임을 확인한다

# W_HIPS:<hips_dut>에 방화벽 XFF Real IPv6 차단 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"false"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"/tmp/signature_user.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/policy_hips_xff_ipv6.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_xff_ipv6.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* 1초 동안 대기
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json signature_infra.json signature_user.json"를 실행한다
\* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_xff_ipv6.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에 국가기반 XFF Real IPv6 차단 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/policy_hips_ips_mgmt.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_mgmt.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/signature_infra.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra.json"에 저장한다
* Json Name:"signature_user"을 File:"data/engine/signature_user.json"을 Load해서 생성한다
* Json Name:"signature_user"을 Device:<hips_dut>의 File:"/tmp/signature_user.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_mgmt.json /tmp/signature_infra.json /tmp/signature_user.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/policy_hips_xff_ipv6.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.rule.[*].sip"의 값을 String value:"[\"2::1\"]"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_xff_ipv6.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/policy_hips_agent_xff_ipv6.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent_xff_ipv6.json"에 저장한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent_xff_ipv6.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_xff_ipv6.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다


# W_HIPS:<hips_dut>에 IPS XFF Real IPv4 차단 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/policy_hips_ips_xff_realip.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_xff_realip.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/signature_infra_xff_realip.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra_xff_realip.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/policy_hips_xff_ipv4.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_xff_ipv4.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/policy_hips_agent_xff_ipv4.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent_xff_ipv4.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent_xff_ipv4.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_xff_realip.json signature_infra_xff_realip.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에 Except IP 테스트를 위한 기본 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/engine/policy_hips_ips_except_ip.json"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_ips_except_ip.json"에 저장한다
* Json Name:"signature_infra"을 File:"data/engine/signature_infra_except_ip.json"을 Load해서 생성한다
* Json Name:"signature_infra"을 Device:<hips_dut>의 File:"/tmp/signature_infra_except_ip.json"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/engine/policy_hips_firewall.json"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/tmp/policy_hips_firewall.json"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/engine/policy_hips_agent.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent.json"에 저장한다
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_ips_except_ip.json signature_infra_except_ip.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_firewall.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

# W_HIPS:<hips_dut>에 Except IP 테스트를 위한 에이전트 설정 파일을 저장하고 설정을 적용한다
* Json Name:"policy_hips_agent"을 File:"data/engine/nsew/policy_hips_agent_except_ip.json"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/tmp/policy_hips_agent_except_ip.json"에 저장한다
* <hips_dut>에서 "./anse_ctl -j engine apply policy_hips_agent_except_ip.json"를 실행한다
* EXEC 실행 결과의 Json XPath:"rcode"의 값은 Number value:"0"와 같다
* <hips_dut>에서 "C:/tmp/./anse_ctl engine chcb json"를 실행한다
* <hips_dut>에서 "del c:/tmp/engine_event.json"를 실행한다
* <hips_dut>에서 "./anse_ctl engine chcb json c:/tmp/engine_event.json"를 실행한다

//////////////////////////////시그니처 db 유효성 자동화 ///////////////////////
# W_HIPS:<hips_dut>에서 신규 시그니처 옵션 유효성을 확인
* <hips_dut>에서 "cd c:/tmp"를 실행한다
* <hips_dut>에서 "./anse_ctl core show-sig-count"를 실행한다
* EXEC 실행 결과 메시지는 "\"fail\": 0"를 포함 한다
* EXEC 실행 결과 메시지는 "\"success\": 0"를 포함 하지 않는다
* <hips_dut>에서 "./anse_ctl engine status"를 실행한다
* EXEC 실행 결과 메시지는 "rcode: 0"를 포함 한다
