/////기본 정책 적용
# P_W_HIPS:<devicename>에 방화벽 테스트를 위한 설정을 수행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/agent.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall.txt ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다

# W_HIPS:<devicename>에 기본 방화벽 테스트를 위한 설정을 수행한다
\* <devicename>에서 "rm -rf /var/policy/policy_fw.json"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/agent.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall.txt ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다
\* EXEC 실행 결과의 Json XPath:"body.body"의 값은 Number value:"1"와 같다
\* EXEC 실행 결과의 Json XPath:"header.result"의 값은 Number value:"0"와 같다


# W_HIPS:<devicename>에 최대 정책 적용 테스트를 위한 설정을 수행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/agent.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* 1초 동안 대기
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* 1초 동안 대기
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* 1초 동안 대기

# W_HIPS:<devicename>에 기본 방화벽 테스트를 위한 정책을 설정 및 적용한다 (<policy_enable>, <rule_name1>, <rule_name2>, <action1>, <action2>, <rule_enable1>, <rule_enable2>, <rule_direction1>, <rule_direction2>, <seq_id1>, <seq_id2>, <protocol1>, <protocol2>, <sip1>, <sip2>, <dip1>, <dip2>, <sport1>, <sport2>, <dport1>, <dport2>, <description1>, <description2>)
* <devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 사용여부를 <policy_enable>로 한다 xpath는 "body.policy_hips_firewall.enable" 이다
* <devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 정책 rule:<rule_name1>을 action:<action1>, enable:<rule_enable1>, direction:<rule_direction1>, seq_id:<seq_id1>, protocol:<protocol1>, sip:<sip1>, dip:<dip1>, sport:<sport1>, dport:<dport1>, description:<description1> 로 변경을 한다 xpath는 "body.policy_hips_firewall.rule.[*].rule_name" 이다
* <devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 정책 rule:<rule_name2>을 action:<action2>, enable:<rule_enable2>, direction:<rule_direction2>, seq_id:<seq_id2>, protocol:<protocol2>, sip:<sip2>, dip:<dip2>, sport:<sport2>, dport:<dport2>, description:<description2> 로 변경을 한다 xpath는 "body.policy_hips_firewall.rule.[*].rule_name" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다

//////chw_fw_test1에서 이벤트 로그 판독까지 사용하는 스텝

# P_W<devicename>에서 로그 처리결과를 확인 한다 예상결과가 <expect_result>이고 로그결과는 <log_result>이다, 추가판단조건 sip:<traffic_sip>, dip:<traffic_dip>, attackid:<sid>, action:<action>, blockaction:<block_action>, priority<severity> json 사용
로그파일 확인
* "P_W_DUT"에서 로그파일: "c:/var/ips.txt"에서 Json Name:"logresult"으로 생성한다
* Json Name:"logresult"을 보여준다
* Json Name:"expectedlogobj"를 Object Table을 통해 생성한다
    |key    |type   |value |
    |-------|-------|------|
    |src_ip    |string|<traffic_sip>|
    |dst_ip    |string|<traffic_dip>|
    |attackid    |string|<sid>|
    |block    |string|<action>|
    |block_action    |string|<block_action>|
    |priority    |string|<severity>|
    
* Json Name:"expectedlogobj"을 보여준다
Json Name:"logresult"의 XPATH:"[*]"의 값은 Object value:"expectedlogobj"를 포함한다
* 판단 기준 값 <expect_result>와 <log_result>가 조건1:"detect" 조건2:"logcheck"에 부합할 때 Json Name:"logresult"의 XPATH:"[*].request.data.[*]"의 값은 Object value:"expectedlogobj"를 포함하고 부합하지 않으면 포함하지 않는다

# P_W_HIPS:<devicename>에서 국가 DB 방화벽 테스트에 대한 이벤트 로그를 확인한다 (<expect_result1>, <expect_result2>, <log_result1>, <log_result2>, <traffic_sip1>, <traffic_sip2>, <user_tip>, <nation1>, <nation2>, <user_nation>, <ndir1>, <ndir2>)
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result1>이고 로그결과는 <log_result1>이다, 추가판단조건 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", block_reason:"sn", rule_name:"nation", block_nation:<nation1>, ndir:<ndir1> json 사용
* 1초 동안 대기
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result2>이고 로그결과는 <log_result2>이다, 추가판단조건 sip:<traffic_sip2>, dip:"$P_W_DUT.ip", block_reason:"sn", rule_name:"nation", block_nation:<nation2>, ndir:<ndir2> json 사용
* 1초 동안 대기
\* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result2>이고 로그결과는 <log_result2>이다, 추가판단조건 sip:<user_tip>, dip:"$P_W_DUT.ip", block_reason:"sn", rule_name:"nation", block_nation:<user_nation>, ndir:<ndir2> json 사용

# P_W_<devicename>에서 <hipslogtype> 로그 처리결과를 확인 한다 예상결과가 <expect_result>이고 로그결과는 <log_result>이다, 추가판단조건 sip:<traffic_sip>, dip:<traffic_dip>, block_reason:<block_reason>, rule_name:<rule_name>, block_nation:<block_nation>, ndir:<ndir> json 사용
로그파일 확인
* "P_W_DUT"에서 로그파일: "c:/var/fw.txt"에서 Json Name:"logresult"으로 생성한다
* Json Name:"logresult"을 보여준다
* Json Name:"expectedlogobj"를 Object Table을 통해 생성한다
    |key    |type   |value |
    |-------|-------|------|
    |src_ip    |string|<traffic_sip>|
    |dst_ip    |string|<traffic_dip>|
    |block_reason    |string|<block_reason>|
    |rule_name    |string|<rule_name>|
    |block_nation    |string|<block_nation>|
    |ndir    |string|<ndir>|
    
* Json Name:"expectedlogobj"을 보여준다
* 판단 기준 값 <expect_result>와 <log_result>가 조건1:"block" 조건2:"logcheck"에 부합할 때 Json Name:"logresult"의 XPATH:"[*].request.data.[*]"의 값은 Object value:"expectedlogobj"를 포함하고 부합하지 않으면 포함하지 않는다


# P_W<devicename>에서 FPG로 탐지 트래픽을 발생 한다 조건은 sip:<sip>, dip:<dip> 이다
* <devicename>에서 "cd smurf/tools/fpg"를 실행한다
* <devicename>에서 sip:<sip>, dip:<dip> FPG 트래픽 발생


/////////////방화벽 스텝///////////////
# P_W_HIPS:<devicename>에서 기본 방화벽 테스트에 대한 이벤트 로그를 확인한다 (<expect_result1>, <expect_result2>, <log_result1>, <log_result2>, <traffic_sip1>, <traffic_sip2>, <rule_name1>, <rule_name2>, <rule_direction1>, <rule_direction2>)
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result1>이고 로그결과는 <log_result1>이다, 추가판단조건 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", block_reason:"fw", rule_name:<rule_name1>, pdir:<rule_direction1> json 사용
\* 1초 동안 대기
\* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result2>이고 로그결과는 <log_result2>이다, 추가판단조건 sip:<traffic_sip2>, dip:"$VS_DUT01.ip", block_reason:"fw", rule_name:<rule_name2>, pdir:<rule_direction2> json 사용

# P_W_<devicename>에서 <hipslogtype> 로그 처리결과를 확인 한다 예상결과가 <expect_result>이고 로그결과는 <log_result>이다, 추가판단조건 sip:<traffic_sip>, dip:<traffic_dip>, block_reason:<block_reason>, rule_name:<rule_name>, pdir:<pdir> json 사용
* "P_W_DUT"에서 로그파일: "c:/var/fw.txt"에서 Json Name:"logresult"으로 생성한다
* Json Name:"logresult"을 보여준다
* Json Name:"expectedlogobj"를 Object Table을 통해 생성한다
    |key    |type   |value |
    |-------|-------|------|
    |src_ip    |string|<traffic_sip>|
    |dst_ip    |string|<traffic_dip>|
    |block_reason    |string|<block_reason>|
    |rule_name    |string|<rule_name>|
    |pdir    |string|<pdir>|
    
* Json Name:"expectedlogobj"을 보여준다
* 판단 기준 값 <expect_result>와 <log_result>가 조건1:"block" 조건2:"logcheck"에 부합할 때 Json Name:"logresult"의 XPATH:"[*].request.data.[*]"의 값은 Object value:"expectedlogobj"를 포함하고 부합하지 않으면 포함하지 않는다

///// Traffic HPING3
# P_W_<devicename>에서 기본 방화벽 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip1>, <traffic_sip2>, <traffic_sport1>, <traffic_sport2>, <traffic_dport1>, <traffic_dport2>, <traffic_protocol1>, <traffic_protocol2>)
* P_W_<devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", sport:<traffic_sport1>, dport:<traffic_dport1>, protocol:<traffic_protocol1> 이다
* 1초 동안 대기
* P_W_<devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip2>, dip:"$P_W_DUT.ip", sport:<traffic_sport2>, dport:<traffic_dport2>, protocol:<traffic_protocol2> 이다
* 1초 동안 대기

# P_W_<devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<sip>, dip:<dip>, sport:<sport>, dport:<dport>, protocol:<protocol> 이다
탐지 트래픽 발생
* <devicename>에서 protocol:<protocol> sip:<sip> dip:<dip> sport:<sport> dport:<dport> hping 트래픽 발생1
EXEC 실행 결과 코드는 "0"와 같다

# P_W_<devicename>에서 국가 DB 방화벽 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip1>, <traffic_sip2>, <user_tip>, <traffic_sport1>, <traffic_sport2>, <traffic_dport1>, <traffic_dport2>, <traffic_protocol1>, <traffic_protocol2>)
* P_W_<devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<user_tip>, dip:"$P_W_DUT.ip", sport:<traffic_sport2>, dport:<traffic_dport2>, protocol:<traffic_protocol2> 이다
* 1초 동안 대기
* P_W_<devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", sport:<traffic_sport1>, dport:<traffic_dport1>, protocol:<traffic_protocol1> 이다
* 1초 동안 대기
* P_W_<devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip2>, dip:"$P_W_DUT.ip", sport:<traffic_sport2>, dport:<traffic_dport2>, protocol:<traffic_protocol2> 이다
* 1초 동안 대기


//// FW GEOIP 정책 설정
# P_W_HIPS:<devicename>에 국가 DB 방화벽 테스트를 위한 정책을 설정 및 적용한다 (<policy_enable>, <user_nation>, <user_nation_ip>, <internal_ip>, <policy_enable>, <nation1>, <nation2>, <nation_direction1>, <nation_direction2>, <nation_description1>, <nation_description2>)
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" 정책 "user_nation":"0"의 string type 설정 "code"을 <user_nation>로 변경을 한다 xpath는 "body.policy_hips_agent.user_nation.[0].code" 이다
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" 정책 "user_nation":"0"의 array type 설정 "ip"을 <user_nation_ip>로 변경을 한다 xpath는 "body.policy_hips_agent.user_nation.[0].ip" 이다
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" 정책 "internal_network":"0"의 array type 설정 "ip"을 <internal_ip>로 변경을 한다 xpath는 "body.policy_hips_agent.internal_network.[0].ip" 이다
* P_W_<devicename>에서 "firewall" 설정파일 "c:/var/policy/data/firewall.txt" 사용여부를 <policy_enable>로 한다 xpath는 "body.policy_hips_firewall.enable" 이다
* P_W_<devicename>에서 "firewall" 설정파일 "c:/var/policy/data/firewall.txt" 정책 "block_nation":"0"의 string type 설정 "nation"을 <nation1>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[0].nation" 이다
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 정책 "block_nation":"0"의 string type 설정 "direction"을 <nation_direction1>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[0].direction" 이다
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 정책 "block_nation":"0"의 string type 설정 "description"을 <nation_description1>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[0].description" 이다
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 정책 "block_nation":"1"의 string type 설정 "nation"을 <nation2>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[1].nation" 이다
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 정책 "block_nation":"1"의 string type 설정 "direction"을 <nation_direction2>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[1].direction" 이다
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 정책 "block_nation":"1"의 string type 설정 "description"을 <nation_description2>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[1].description" 이다
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 정책 "block_nation":"2"의 string type 설정 "nation"을 <user_nation>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[2].nation" 이다
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 정책 "block_nation":"2"의 string type 설정 "direction"을 <nation_direction2>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[2].direction" 이다
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 정책 "block_nation":"2"의 string type 설정 "description"을 <nation_description2>로 변경을 한다 xpath는 "body.policy_hips_firewall.block_nation.[2].description" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
///agent 정책 적용시 정책 적용 로그가 많이 발생해서 이벤트 로그에 too long.. 메세지 발생함 이부분을 예방하고자 우선 주석처리
\* P_W_<devicename>에서 "agent" 정책 암호화 CLI:"./hipstest file plyenc ./data/agent.txt ./work/agent.txt"를 한다
\* P_W_<devicename>에서 "agent" 정책 적용 CLI:"./hipstest set policy agent ./work/agent.txt"을 한다
\* P_W_<devicename>에서 "agent" 정책 적용 CLI:"./hipstest get policy agent"을 한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest get policy fw"을 한다

\* <devicename>에서 "cd /usr/local/ahnlab/chipsl/log"를 실행한다
\* <devicename>에서 "event=$(ls |grep fw |head -n 1)"를 실행한다
\* <devicename>에서 "rm -rf $event"를 실행한다

//////
# P_W_<devicename>에서 <policyname> 설정파일 <policyfile> 사용여부를 <booleanvalue1>로 한다 xpath는 <xpathval1> 이다

* Json Name:<policyname>을 Device:<devicename>의 File:<policyfile>을 Load해서 생성한다
* Json Name:<policyname>의 XPATH:<xpathval1>의 값을 Boolean value:<booleanvalue1>로 변경한다
* Json Name:<policyname>을 Device:<devicename>의 File:<policyfile>에 저장한다

# P_W_<devicename>에서 <policyname> 설정파일 <policyfile> 정책 <rulename>:<rulenumber>의 string type 설정 <objname1>을 <stringvalue1>로 변경을 한다 xpath는 <xpathval1> 이다
* Json Name:<policyname>을 Device:<devicename>의 File:<policyfile>을 Load해서 생성한다
* Json Name:<policyname>의 XPATH:<xpathval1>의 값을 String value:<stringvalue1>로 변경한다
* Json Name:<policyname>을 Device:<devicename>의 File:<policyfile>에 저장한다

# P_W_<devicename>에서 <policyname> 정책 암호화 CLI:<encryptcli>를 한다
암호화 수행
\* <devicename>에서 "cd /usr/local/ahnlab/chipsl/tools"를 실행한다
* <devicename>에서 <encryptcli>를 실행한다

# P_W_<devicename>에서 <policyname> 정책 적용 CLI:<hipstestcli>을 한다
정책 적용 수행
\* <devicename>에서 "cd /usr/local/ahnlab/chipsl/tools"를 실행한다
* <devicename>에서 <hipstestcli>를 실행한다
결과 값에 header.result: 0 으로 출력
\* EXEC 실행 결과의 Json XPath:"header.result"의 값은 Number value:"0"와 같다

///// 방화벽 최대정책 ///////
# P_W_HIPS:<devicename>에 최대 정책이 추가된 상태에서의 동작을 확인한다 (<rule_name1>, <rule_name2>, <rule_name3>, <rule_name4>, <action>, <rule_enable>, <rule_direction>, <seq_id1>, <seq_id2>, <protocol>, <sip1>, <sip2>, <sip3>, <sip4>, <dip>, <sport>, <dport>, <description1>, <description2>)
방화벽 정책 최대 추가된 상태에서 신규룰 추가 제한 확인
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 rule:<rule_name1>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id1>, protocol:<protocol>, sip:<sip1>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description1>로 추가. xpath는 "body.policy_hips_firewall.rule"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 1초 동안 대기
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 rule:<rule_name2>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id2>, protocol:<protocol>, sip:<sip2>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description1>로 추가. xpath는 "body.policy_hips_firewall.rule"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 1초 동안 대기
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 rule:<rule_name3>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id2>, protocol:<protocol>, sip:<sip3>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description1>로 추가. xpath는 "body.policy_hips_firewall.rule"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 1초 동안 대기
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 rule:<rule_name4>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id2>, protocol:<protocol>, sip:<sip4>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description1>로 추가. xpath는 "body.policy_hips_firewall.rule"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 1초 동안 대기

# P_W_HIPS:<devicename>에 방화벽 최대 정책이 추가된 상태에서의 동작을 확인한다 (<rule_name1>, <rule_name2>, <rule_name3>, <rule_name4>, <action>, <rule_enable>, <rule_direction>, <seq_id1>, <seq_id2>, <seq_id3>, <seq_id4>, <protocol>, <sip1>, <sip2>, <sip3>, <sip4>, <dip>, <sport>, <dport>, <description1>, <description2>)
방화벽 정책 최대 추가된 상태에서 신규룰 추가 제한 확인
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 rule:<rule_name1>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id1>, protocol:<protocol>, sip:<sip1>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description1>로 추가. xpath는 "body.policy_hips_firewall.rule"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 1초 동안 대기
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 rule:<rule_name2>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id2>, protocol:<protocol>, sip:<sip2>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description1>로 추가. xpath는 "body.policy_hips_firewall.rule"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 1초 동안 대기
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 rule:<rule_name3>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id3>, protocol:<protocol>, sip:<sip3>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description1>로 추가. xpath는 "body.policy_hips_firewall.rule"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 1초 동안 대기
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 rule:<rule_name4>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id4>, protocol:<protocol>, sip:<sip4>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description1>로 추가. xpath는 "body.policy_hips_firewall.rule"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 1초 동안 대기

# P_W_HIPS:<devicename>에 방화벽 최대 정책이 수정된 상태에서의 동작을 확인한다 (<rule_name1>, <rule_name2>, <rule_name3>, <rule_name4>, <action>, <rule_enable>, <rule_direction>, <seq_id1>, <seq_id2>, <seq_id3>, <seq_id4>, <protocol>, <sip1>, <sip2>, <sip3>, <sip4>, <dip>, <sport>, <dport>, <description1>, <description2>)
방화벽 정책 최대 추가된 상태에서 신규룰 추가 제한 확인
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 rule:<rule_name3>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id3>, protocol:<protocol>, sip:<sip1>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description1>로 추가. xpath는 "body.policy_hips_firewall.rule"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 1초 동안 대기
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 rule:<rule_name4>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id4>, protocol:<protocol>, sip:<sip2>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description1>로 추가. xpath는 "body.policy_hips_firewall.rule"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 1초 동안 대기

# P_W_<devicename>에서 <policyname> 설정파일 <policyfile> 방화벽 정책에 rule:<rule_name>, action:<action>, enable:<rule_enable>, direction:<rule_direction>, seq_id:<seq_id>, protocol:<protocol>, sip:<sip>, dip:<dip>, sport:<sport>, dport:<dport>, description:<description>로 추가. xpath는 <xpathval>이다
* Json Name:<policyname>을 Device:<devicename>의 File:<policyfile>을 Load해서 생성한다
* Json Name:"fwruleobj"를 Object Table을 통해 생성한다
    |key    |type   |value |
    |-------|-------|------|
    |rule_name  |string|<rule_name>|
    |action    |string|<action>|
    |enable    |boolean|<rule_enable>|
    |direction    |string|<rule_direction>|
    |seq_id    |number|<seq_id>|
    |protocol    |string|<protocol>|
    |sip    |array|<sip>|
    |dip    |array|<dip>|
    |sport    |array|<sport>|
    |dport    |array|<dport>|
    |description    |string|<description>|
* Json Name:<policyname>의 XPATH:<xpathval>에 Json value:"fwruleobj"를 추가한다
* Json Name:<policyname>을 Device:<devicename>의 File:<policyfile>에 저장한다

# P_W_<devicename>에서 최대 정책 방화벽 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip1>, <traffic_sip2>, <traffic_sip4>, <traffic_sport>, <traffic_dport>, <traffic_protocol1>, <traffic_protocol2>)
* P_W_"P_W_ATTACK"에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", sport:<traffic_sport>, dport:<traffic_dport>, protocol:<traffic_protocol1> 이다
* 1초 동안 대기
* P_W_"P_W_ATTACK"에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip2>, dip:"$P_W_DUT.ip", sport:<traffic_sport>, dport:<traffic_dport>, protocol:<traffic_protocol1> 이다
* 1초 동안 대기
\* P_W_"P_W_ATTACK"에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip4>, dip:"$P_W_DUT.ip", sport:<traffic_sport>, dport:<traffic_dport>, protocol:<traffic_protocol1> 이다
\* 15초 동안 대기

# P_W_HIPS:<devicename>에서 최대 정책 방화벽 테스트에 대한 이벤트 로그를 확인한다 (<expect_result1>, <expect_result2>, <expect_result4>, <log_result1>, <log_result2>, <log_result4>, <traffic_sip1>, <traffic_sip2>, <traffic_sip4>, <rule_name1>, <rule_name2>, <rule_name4>, <rule_direction>)
* P_W_"P_W_DUT"에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result1>이고 로그결과는 <log_result1>이다, 추가판단조건 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", block_reason:"fw", rule_name:<rule_name1>, pdir:<rule_direction> json 사용
* 1초 동안 대기
* P_W_"P_W_DUT"에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result2>이고 로그결과는 <log_result2>이다, 추가판단조건 sip:<traffic_sip2>, dip:"$P_W_DUT.ip", block_reason:"fw", rule_name:<rule_name2>, pdir:<rule_direction> json 사용
* 1초 동안 대기

# P_W_HIPS:<devicename>에서 최대 정책 방화벽 수정 및 삭제 테스트에 대한 이벤트 로그를 확인한다 (<expect_result1>, <expect_result2>, <expect_result4>, <log_result1>, <log_result2>, <log_result4>, <traffic_sip1>, <traffic_sip2>, <traffic_sip4>, <rule_name1>, <rule_name2>, <rule_name3>, <rule_direction>)
* P_W_"P_W_DUT"에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result1>이고 로그결과는 <log_result1>이다, 추가판단조건 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", block_reason:"fw", rule_name:<rule_name3>, pdir:<rule_direction> json 사용
* 1초 동안 대기

//// 사용자 정의 국가 최대 정책
# P_W_HIPS:<devicename>에 최대 사용자 정의 국가가 추가된 상태에서의 동작을 확인한다 (<user_nation1>, <user_nation2>, <user_nation3>, <user_nation4>, <user_nation_ip1>, <user_nation_ip2>, <nation_direction>, <nation_description1>, <nation_description2>, <nation_description4>, <policy_enable>)
AGENT 정책에 사용자정의 국가 최대 설정 상태에서 신규 사용자정의 국가 추가 시 동작 확인
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"user_nation", code:<user_nation1>, ip:<user_nation_ip1>로 추가. xpath는 "body.policy_hips_agent.user_nation"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/agent.txt ./work/agent.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy agent ./work/agent.txt"을 한다
AGENT 정책 최대 추가된 상태에서 룰 1개 삭제 후 추가 확인
\* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 name:<user_nation1>을 삭제. xpath는 "body.policy_hips_agent.user_nation.[*].code"이다
\* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 name:<user_nation3>을 삭제. xpath는 "body.policy_hips_agent.user_nation.[*].code"이다
\* <devicename>에서 "cd c:/var/policy"를 실행한다
\* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/agent.txt ./work/agent.txt"를 한다
\* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy agent ./work/agent.txt"을 한다
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"user_nation", code:<user_nation2>, ip:<user_nation_ip2>로 추가. xpath는 "body.policy_hips_agent.user_nation"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/agent.txt ./work/agent.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy agent ./work/agent.txt"을 한다
\AGENT 정책 최대 추가된 상태에서 일부 룰 변경
\* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" 정책 "code":<user_nation2>을 ip:<user_nation_ip2> 로 변경을 한다 xpath는 "body.policy_hips_agent.user_nation.[*].code" 이다
\* <devicename>에서 "cd c:/var/policy"를 실행한다
\* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/agent.txt ./work/agent.txt"를 한다
\* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy agent ./work/agent.txt"을 한다
방화벽 정책 활성화
* P_W_<devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 사용여부를 <policy_enable>로 한다 xpath는 "body.policy_hips_firewall.enable" 이다
사용자정의 국가를 방화벽 룰에 추가: nation1: 신규추가 국가, nation2: 변경한 국가, nation3: 기존에 있던 사용자 정의 국가
* <devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 nation:<user_nation1>, direction:<nation_direction>, description:<nation_description1>로 추가. xpath는 "body.policy_hips_firewall.block_nation"이다
* <devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 nation:<user_nation2>, direction:<nation_direction>, description:<nation_description2>로 추가. xpath는 "body.policy_hips_firewall.block_nation"이다
* <devicename>에서 "policy_fw" 설정파일 "c:/var/policy/data/firewall.txt" 방화벽 정책에 nation:<user_nation4>, direction:<nation_direction>, description:<nation_description4>로 추가. xpath는 "body.policy_hips_firewall.block_nation"이다
방화벽 정책을 적용시키기 위해 policy_fw.json 암호화 및 정책적용
* <devicename>에서 "cd c:/var/policy"를 실행한다
* P_W_<devicename>에서 "firewall" 정책 암호화 CLI:"./hipstest file plyenc ./data/firewall.txt ./work/firewall.txt"를 한다
* P_W_<devicename>에서 "firewall" 정책 적용 CLI:"./hipstest set policy fw ./work/firewall.txt"을 한다
* 60초 동안 대기
* "P_W_DUT"에서 "rm 'C:/Program Files/AhnLab/EPC/HIPS/LOG/ems/hipssvc.log'"를 실행한다

# P_W_<devicename>에서 최대 사용자 정의 국가 방화벽 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip1>, <traffic_sip2>, <traffic_sip4>, <traffic_sport>, <traffic_dport>, <traffic_protocol>)
* <devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", sport:<traffic_sport>, dport:<traffic_dport>, protocol:<traffic_protocol> 이다
* 1초 동안 대기
* <devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip2>, dip:"$P_W_DUT.ip", sport:<traffic_sport>, dport:<traffic_dport>, protocol:<traffic_protocol> 이다
* 1초 동안 대기
\* <devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip4>, dip:"$P_W_DUT.ip", sport:<traffic_sport>, dport:<traffic_dport>, protocol:<traffic_protocol> 이다
\* 15초 동안 대기

# P_W_HIPS:<devicename>에서 최대 사용자 정의 국가 방화벽 테스트에 대한 이벤트 로그를 확인한다 (<expect_result1>, <expect_result2>, <expect_result4>, <log_result1>, <log_result2>, <log_result4>, <traffic_sip1>, <traffic_sip2>, <traffic_sip4>, <user_nation1>, <user_nation2>, <user_nation4>, <ndir>)
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result1>이고 로그결과는 <log_result1>이다, 추가판단조건 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", block_reason:"sn", rule_name:"nation", block_nation:<user_nation1>, ndir:<ndir> json 사용
* 1초 동안 대기
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result2>이고 로그결과는 <log_result2>이다, 추가판단조건 sip:<traffic_sip2>, dip:"$P_W_DUT.ip", block_reason:"sn", rule_name:"nation", block_nation:<user_nation2>, ndir:<ndir> json 사용
* 1초 동안 대기
\* <devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result4>이고 로그결과는 <log_result4>이다, 추가판단조건 sip:<traffic_sip4>, dip:"$P_W_DUT.ip", block_reason:"sn", rule_name:"nation", block_nation:<user_nation4>, ndir:<ndir> json 사용

//// user geo db max rule
# P_W_HIPS:<devicename>에서 최대 사용자 정의 국가 방화벽 테스트 RULE에 대한 이벤트 로그를 확인한다 (<expect_result1>, <expect_result2>, <expect_result4>, <log_result1>, <log_result2>, <log_result4>, <traffic_sip1>, <traffic_sip2>, <traffic_sip4>, <user_nation1>, <user_nation2>, <user_nation4>, <ndir>)
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result1>이고 로그결과는 <log_result1>이다, 추가판단조건 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", block_reason:"sn", rule_name:"nation", block_nation:<user_nation2>, ndir:<ndir> json 사용
* 1초 동안 대기


////IPS 정책 기본 설정
# P_W_HIPS:<hips_dut>에 정책 파일 load 한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/product/chw/ips.txt"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/var/policy/data/ips.txt"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/product/chw/firewall.txt"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/var/policy/data/firewall.txt"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/product/chw/agent.txt"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/var/policy/data/agent.txt"에 저장한다

# P_W_HIPS:<hips_dut>에 user_signature 정책 파일 load 한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/product/chw/ips_user.txt"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/var/policy/data/ips.txt"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/product/chw/firewall.txt"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/var/policy/data/firewall.txt"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/product/chw/agent.txt"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/var/policy/data/agent.txt"에 저장한다

# P_W_HIPS:<hips_dut>에 최대 rule 정책 파일 load 한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/product/chw/ips.txt"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/var/policy/data/ips.txt"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/product/chw/firewall_rule_100.txt"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/var/policy/data/firewall_rule_100.txt"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/product/chw/agent_int_exc_100.txt"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/var/policy/data/agent_int_exc_100.txt"에 저장한다

# P_W_HIPS:<hips_dut>에 최대 user geo rule 정책 파일 load 한다
* Json Name:"policy_hips_ips_mgmt"을 File:"data/product/chw/ips.txt"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/var/policy/data/ips.txt"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/product/chw/firewall.txt"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/var/policy/data/firewall.txt"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/product/chw/agent_user_geo_rule_100.txt"을 Load해서 생성한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/var/policy/data/agent_user_geo_rule_100.txt"에 저장한다

# P_W_HIPS:<devicename>에 최대 rule 테스트를 위한 설정을 수행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/agent_int_exc_100.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent_int_exc_100.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/ips.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/ips.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall_rule_100.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall_rule_100.txt ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다

# P_W_HIPS:<devicename>에 최대 user geo rule 테스트를 위한 설정을 수행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/agent_user_geo_rule_100.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent_user_geo_rule_100.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/ips.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/ips.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall.txt ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다

# P_W_HIPS:<devicename>에 IPS 테스트를 위한 설정을 수행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/agent.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/ips.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/ips.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall.txt ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다

//////IPS 정책 적용
# P_W_HIPS:<devicename>에 IPS additional 대응방법 테스트를 위한 정책을 설정 및 적용한다 (<sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "additional" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.additional.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
\* EXEC 실행 결과의 Json XPath:"header.result"의 값은 Number value:"0"와 같다
\* <devicename>에서 "cd /usr/local/ahnlab/chipsl/log"를 실행한다
\* <devicename>에서 "event=$(ls |grep ips |head -n 1)"를 실행한다
\* <devicename>에서 "rm -rf $event"를 실행한다

# P_W_HIPS:<devicename>에 IPS user 대응방법 테스트를 위한 정책을 설정 및 적용한다 (<sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "additional" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.user.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다

//// IPS USER FPG 트래픽 인가
# P_W_<devicename>에서 IPS user 대응방법 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip>, <sid>)
* <devicename>에서 FPG rule 파일 설정(additional 시그니처용)
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 user sig 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip>, dip:"$P_W_DUT.ip", sid:<sid>이다
* 3초 동안 대기

# P_W_<devicename>에서 FPG로 user sig 탐지 트래픽을 발생 한다 조건은 sip:<sip>, dip:<dip>, sid:<sidvalue>이다
* <devicename>에서 "cd smurf/tools/fpg"를 실행한다
* P_W_<devicename>에서 sip:<sip>, dip:<dip> FPG sid4986 트래픽 발생
EXEC 실행 결과 코드는 "0"와 같다

//// IPS FPG 트래픽 인가
# P_W_<devicename>에서 IPS additional 대응방법 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip>, <sid>)
* <devicename>에서 FPG rule 파일 설정(additional 시그니처용)
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip>, dip:"$P_W_DUT.ip", sid:<sid>이다
* 3초 동안 대기

# P_W_<devicename>에서 FPG로 탐지 트래픽을 발생 한다 조건은 sip:<sip>, dip:<dip>, sid:<sidvalue>이다
* <devicename>에서 "cd smurf/tools/fpg"를 실행한다
* P_W_<devicename>에서 sip:<sip>, dip:<dip> FPG 트래픽 발생
EXEC 실행 결과 코드는 "0"와 같다

//// IPS 로그 판독
# P_W_HIPS:<devicename>에서 IPS 테스트에 대한 이벤트 로그를 확인한다1 (<expect_result>, <log_result>, <traffic_sip>, <sid>, <action>, <block_action>, <severity>)
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result>이고 로그결과는 <log_result>이다, 추가판단조건 sip:<traffic_sip>, dip:"$P_W_DUT.ip", attackid:<sid>, action:<action>, blockaction:<block_action>, priority<severity> json 사용

# P_W_<devicename>에서 <hipslogtype> 로그 처리결과를 확인 한다 예상결과가 <expect_result>이고 로그결과는 <log_result>이다, 추가판단조건 sip:<traffic_sip>, dip:<traffic_dip>, attackid:<sid>, action:<block>, blockaction:<block_action>, priority<priority> json 사용
* "P_W_DUT"에서 로그파일: "c:/var/log.txt"에서 Json Name:"logresult"으로 생성한다
* Json Name:"logresult"을 보여준다
* Json Name:"expectedlogobj"를 Object Table을 통해 생성한다
    |key    |type   |value |
    |-------|-------|------|
    |src_ip    |string|<traffic_sip>|
    |dst_ip    |string|<traffic_dip>|
    |attackid    |string|<sid>|
    |block    |string|<block>|
    |block_action    |string|<block_action>|
    |priority    |string|<priority>|
    
* Json Name:"expectedlogobj"을 보여준다
Json Name:"logresult"의 XPATH:"[*]"의 값은 Object value:"expectedlogobj"를 포함한다
* 판단 기준 값 <expect_result>와 <log_result>가 조건1:"block" or "detect" 조건2:"logcheck"에 부합할 때 Json Name:"logresult"의 XPATH:"[*].request.data.[*]"의 값은 Object value:"expectedlogobj"를 포함하고 부합하지 않으면 포함하지 않는다

/////ips add direction period threshold 정책 설정
# P_W_HIPS:<devicename>에 IPS additional 탐지방향 및 공격 인정 테스트를 위한 정책을 설정 및 적용한다 (<internal_network_ip>, <sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_agent" 설정파일 "/var/policy/data/agent.txt" 정책 "internal_network":"0"의 array type 설정 "ip"을 <internal_network_ip>로 변경을 한다 xpath는 "body.policy_hips_agent.internal_network.[0].ip" 이다
* <devicename>에서 "policy_mgmt" 설정파일 "/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.additional.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다
\* <devicename>에서 "cd /usr/local/ahnlab/chipsl/tools"를 실행한다
\* <devicename>에서 "../exec.sh ./sqlite3 /usr/local/ahnlab/chipsl/log/$event 'pragma key=\"RmxRkwl77*)tkfdkskarp80*&gkthtj\"; delete from send_failed_log;'"를 실행한다

////ips user direction period threshold 정책 설정
# P_W_HIPS:<devicename>에 IPS user 탐지방향 및 공격 인정 테스트를 위한 정책을 설정 및 적용한다 (<internal_network_ip>, <sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_agent" 설정파일 "/var/policy/data/agent.txt" 정책 "internal_network":"0"의 array type 설정 "ip"을 <internal_network_ip>로 변경을 한다 xpath는 "body.policy_hips_agent.internal_network.[0].ip" 이다
* <devicename>에서 "policy_mgmt" 설정파일 "/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.user.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

# P_W_<devicename>에서 IPS additional 탐지방향 및 공격 인정 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip>, <sid>, <traffic_count>, <traffic_delaytime>)
* <devicename>에서 FPG rule 파일 설정(additional 시그니처용)
* 1초 동안 대기
* <devicename>에서 FPG case2로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip>, dip:"$P_W_DUT.ip", sid:<sid>, traffic_count:<traffic_count>, traffic_delaytime:<traffic_delaytime>이다
* 3초 동안 대기

# P_W_HIPS:<devicename>에서 IPS 테스트에 대한 이벤트 로그를 확인한다2 (<expect_result>, <log_result>, <traffic_sip>, <sid>, <action>, <block_action>, <severity>, <ndir>)
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result>이고 로그결과는 <log_result>이다, 추가판단조건 sip:<traffic_sip>, dip:"$P_W_DUT.ip", attackid:<sid>, action:<action>, blockaction:<block_action>, priority<severity>, ndir<ndir> json 사용

# P_W_<devicename>에서 <hipslogtype> 로그 처리결과를 확인 한다 예상결과가 <expect_result>이고 로그결과는 <log_result>이다, 추가판단조건 sip:<traffic_sip>, dip:<traffic_dip>, attackid:<sid>, action:<block>, blockaction:<block_action>, priority<priority>, ndir<ndir> json 사용
로그파일 확인
* "P_W_DUT"에서 로그파일: "c:/var/log.txt"에서 Json Name:"logresult"으로 생성한다
* Json Name:"logresult"을 보여준다
* Json Name:"expectedlogobj"를 Object Table을 통해 생성한다
    |key    |type   |value |
    |-------|-------|------|
    |src_ip    |string|<traffic_sip>|
    |dst_ip    |string|<traffic_dip>|
    |attackid    |string|<sid>|
    |block    |string|<block>|
    |block_action    |string|<block_action>|
    |priority    |string|<priority>|
    |ndir    |string|<ndir>|
* Json Name:"expectedlogobj"을 보여준다
* 판단 기준 값 <expect_result>와 <log_result>가 조건1:"block" 조건2:"logcheck"에 부합할 때 Json Name:"logresult"의 XPATH:"[*].request.data.[*]"의 값은 Object value:"expectedlogobj"를 포함하고 부합하지 않으면 포함하지 않는다

//////////IPS add method
# P_W_HIPS:<devicename>에 IPS additional 처리 방법 및 위험도 테스트를 위한 정책을 설정 및 적용한다 (<sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.additional.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

/////////IPS user method
# P_W_HIPS:<devicename>에 IPS user 처리 방법 및 위험도 테스트를 위한 정책을 설정 및 적용한다 (<sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.user.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

# P_W_<devicename>에서 IPS additional 처리 방법 및 위험도 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip>, <sid>, <traffic_dport>, <traffic_protocol>)
\* <devicename>에서 FPG rule 파일 설정(additional 시그니처용)
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip>, dip:"$P_W_DUT.ip", sid:<sid>이다
* 15초 동안 대기
* P_W_<devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip>, dip:"$P_W_DUT.ip", sport:"1024", dport:<traffic_dport>, protocol:<traffic_protocol> 이다
* 3초 동안 대기

///// IPS direction_period threshold
# P_W_HIPS:<devicename>에 IPS 탐지방향 및 공격 인정 테스트를 위한 정책을 설정 및 적용한다 (<internal_network_ip>, <sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" 정책 "internal_network":"0"의 array type 설정 "ip"을 <internal_network_ip>로 변경을 한다 xpath는 "body.policy_hips_agent.internal_network.[0].ip" 이다
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

# P_W_<devicename>에서 IPS 탐지방향 및 공격 인정 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip>, <sid>, <traffic_count>, <traffic_delaytime>)
\* <devicename>에서 FPG rule 파일 설정(기본시그니처용)
* 1초 동안 대기
* P_W_<devicename>에서 FPG sid73 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip>, dip:"$P_W_DUT.ip", sid:<sid>, traffic_count:<traffic_count>, traffic_delaytime:<traffic_delaytime>이다
* 3초 동안 대기

# P_W_<devicename>에서 FPG sid73 탐지 트래픽을 발생 한다 조건은 sip:<sip>, dip:<dip>, sid:<sidvalue>, traffic_count:<traffic_count>, traffic_delaytime:<traffic_delaytime>이다
* <devicename>에서 "cd smurf/tools/fpg"를 실행한다
* P_W_<devicename>에서 sip:<sip>, dip:<dip>, traffic_delaytime:<traffic_delaytime>, traffic_count:<traffic_count> FPG sid73 트래픽 발생
EXEC 실행 결과 코드는 "0"와 같다

////IPS exception
# P_W_HIPS:<devicename>에 IPS 예외 IP 테스트를 위한 정책을 설정 및 적용한다 (<except_ip>, <sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" 정책 "except_ip":"ip"의 string type 설정 "ip"을 <except_ip>로 변경을 한다 xpath는 "body.policy_hips_agent.except_ip.[0].ip" 이다
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

# P_W_<devicename>에서 IPS 예외 IP 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip>, <sid>)
\* <devicename>에서 FPG rule 파일 설정(기본시그니처용)
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 sid73 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip>, dip:"$P_W_DUT.ip", sid:<sid>이다
* 3초 동안 대기

# P_W_<devicename>에서 FPG로 sid73 탐지 트래픽을 발생 한다 조건은 sip:<sip>, dip:<dip>, sid:<sidvalue>이다
* <devicename>에서 "cd smurf/tools/fpg"를 실행한다
* P_W_<devicename>에서 sip:<sip>, dip:<dip> FPG sid73 트래픽 발생
EXEC 실행 결과 코드는 "0"와 같다

//// IPS MAX except
# P_W_HIPS:<devicename>에 최대 예외 IP가 추가된 상태에서의 동작을 확인한다 (<except_name1>, <except_name2>, <except_name3>, <except_name4>, <except_ip1>, <except_ip2>, <except_ip3>, <except_ip4>, <description>, <sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
AGENT 정책 최대 추가된 상태에서 룰 1개 삭제 후 추가 확인
예외IP 1개 추가 및 적용
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"except_ip", name:<except_name1>, ip:<except_ip1>, description<description>로 추가. xpath는 "body.policy_hips_agent.except_ip"이다
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"except_ip", name:<except_name2>, ip:<except_ip2>, description<description>로 추가. xpath는 "body.policy_hips_agent.except_ip"이다
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"except_ip", name:<except_name3>, ip:<except_ip3>, description<description>로 추가. xpath는 "body.policy_hips_agent.except_ip"이다
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"except_ip", name:<except_name4>, ip:<except_ip4>, description<description>로 추가. xpath는 "body.policy_hips_agent.except_ip"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
예외IP 1개 삭제 및 적용
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 name:<except_name4>을 삭제. xpath는 "body.policy_hips_agent.except_ip.[*].name"이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
AGENT 정책 최대 추가된 상태에서 일부 룰 변경
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" 정책 "name":<except_name3>을 ip:<except_ip4> 로 변경을 한다 xpath는 "body.policy_hips_agent.except_ip.[*].name" 이다
policy_agent.json 암호화 및 정책적용
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

# P_W_<devicename>에서 최대값 IPS 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip1>, <traffic_sip2>, <traffic_sip3>, <traffic_sip4>, <sid>)
\* <devicename>에서 FPG rule 파일 설정(기본시그니처용)
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 sid73 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", sid:<sid>이다
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 sid73 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip2>, dip:"$P_W_DUT.ip", sid:<sid>이다
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 sid73 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip4>, dip:"$P_W_DUT.ip", sid:<sid>이다
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 sid73 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip3>, dip:"$P_W_DUT.ip", sid:<sid>이다
* 3초 동안 대기


# P_W_HIPS:<devicename>에서 최대값 IPS 테스트에 대한 이벤트 로그를 확인한다 (<expect_result1>, <expect_result2>, <expect_result3>, <expect_result4>, <log_result1>, <log_result2>, <log_result3>, <log_result4>, <traffic_sip1>, <traffic_sip2>, <traffic_sip3>, <traffic_sip4>, <sid>, <action>, <block_action>, <severity>)
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result1>이고 로그결과는 <log_result1>이다, 추가판단조건 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", attackid:<sid>, action:<action>, blockaction:<block_action>, priority<severity> json 사용
* 1초 동안 대기
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result2>이고 로그결과는 <log_result2>이다, 추가판단조건 sip:<traffic_sip2>, dip:"$P_W_DUT.ip", attackid:<sid>, action:<action>, blockaction:<block_action>, priority<severity> json 사용
* 1초 동안 대기
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result3>이고 로그결과는 <log_result3>이다, 추가판단조건 sip:<traffic_sip3>, dip:"$P_W_DUT.ip", attackid:<sid>, action:<action>, blockaction:<block_action>, priority<severity> json 사용
* 1초 동안 대기
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result4>이고 로그결과는 <log_result4>이다, 추가판단조건 sip:<traffic_sip4>, dip:"$P_W_DUT.ip", attackid:<sid>, action:<action>, blockaction:<block_action>, priority<severity> json 사용

/////IPS max internal ip
# P_W_HIPS:<devicename>에 최대 내부 IP가 추가된 상태에서의 동작을 확인한다 (<intnet_name1>, <intnet_name2>, <intnet_name3>, <intnet_name4>, <internal_network1>, <internal_network2>, <internal_network3>, <internal_network4>, <description>, <sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
AGENT 정책 최대 추가된 상태에서 룰 1개 삭제 후 추가 확인
내부 네트워크 IP 1개 삭제 및 적용
\* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 name:<intnet_name3>을 삭제. xpath는 "body.policy_hips_agent.internal_network.[*].name"이다
\* <devicename>에서 "policy_agent" 정책 암호화 CLI:"../exec.sh ./encrypt enc /var/policy/policy_agent.json"를 한다
\* <devicename>에서 "policy_agent" 정책 적용 CLI:"../exec.sh ./hipstest set policy agent /var/policy/policy_agent.json.enc"을 한다
내부 네트워크 IP 1개 추가 및 적용
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name1>, ip:<internal_network1>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name2>, ip:<internal_network2>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name3>, ip:<internal_network3>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name4>, ip:<internal_network4>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
AGENT 정책 최대 추가된 상태에서 일부 룰 변경
\* <devicename>에서 "policy_agent" 설정파일 "/var/policy/policy_agent.json" 정책 "name":<intnet_name2>을 ip:<internal_network2> 로 변경을 한다 xpath는 "body.policy_hips_agent.internal_network.[*].name" 이다
policy_agent.json 암호화 및 정책적용
\* <devicename>에서 "policy_agent" 정책 암호화 CLI:"../exec.sh ./encrypt enc /var/policy/policy_agent.json"를 한다
\* <devicename>에서 "policy_agent" 정책 적용 CLI:"../exec.sh ./hipstest set policy agent /var/policy/policy_agent.json.enc"을 한다
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

# P_W_HIPS:<devicename>에 최대 내부 IP가 추가, 수정, 삭제된 상태에서의 동작을 확인한다 (<intnet_name1>, <intnet_name2>, <intnet_name3>, <intnet_name4>, <internal_network1>, <internal_network2>, <internal_network3>, <internal_network4>, <description>, <sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
AGENT 정책 최대 추가된 상태에서 룰 1개 삭제 후 추가 확인
내부 네트워크 IP 99개 추가 및 적용
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name1>, ip:<internal_network1>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name2>, ip:<internal_network2>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name3>, ip:<internal_network3>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name4>, ip:<internal_network4>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
AGENT 정책 최대 추가된 상태에서 일부 룰 변경
\* <devicename>에서 "policy_agent" 설정파일 "/var/policy/policy_agent.json" 정책 "name":<intnet_name2>을 ip:<internal_network2> 로 변경을 한다 xpath는 "body.policy_hips_agent.internal_network.[*].name" 이다
policy_agent.json 암호화 및 정책적용
\* <devicename>에서 "policy_agent" 정책 암호화 CLI:"../exec.sh ./encrypt enc /var/policy/policy_agent.json"를 한다
\* <devicename>에서 "policy_agent" 정책 적용 CLI:"../exec.sh ./hipstest set policy agent /var/policy/policy_agent.json.enc"을 한다
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

# P_W_<devicename>에서 최대값 IPS internal 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip1>, <traffic_sip2>, <traffic_sip3>, <traffic_sip4>, <sid>)
\* <devicename>에서 FPG rule 파일 설정(기본시그니처용)
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 sid73 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", sid:<sid>이다

# P_W_HIPS:<devicename>에서 최대값 IPS internal 테스트에 대한 이벤트 로그를 확인한다 (<expect_result1>, <expect_result2>, <expect_result3>, <expect_result4>, <log_result1>, <log_result2>, <log_result3>, <log_result4>, <traffic_sip1>, <traffic_sip2>, <traffic_sip3>, <traffic_sip4>, <sid>, <action>, <block_action>, <severity>)
* P_W_<devicename>에서 "event" 로그 처리결과를 확인 한다 예상결과가 <expect_result1>이고 로그결과는 <log_result1>이다, 추가판단조건 sip:<traffic_sip1>, dip:"$P_W_DUT.ip", attackid:<sid>, action:<action>, blockaction:<block_action>, priority<severity> json 사용
* 1초 동안 대기

///////except max ip
# P_W_HIPS:<devicename>에 최대 제외 IP가 추가, 수정, 삭제된 상태에서의 동작을 확인한다 (<intnet_name1>, <intnet_name2>, <intnet_name3>, <intnet_name4>, <internal_network1>, <internal_network2>, <internal_network3>, <internal_network4>, <description>, <sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
AGENT 정책 최대 추가된 상태에서 룰 1개 삭제 후 추가 확인
내부 네트워크 IP 99개 추가 및 적용
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name1>, ip:<internal_network1>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name2>, ip:<internal_network2>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name3>, ip:<internal_network3>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" Agent 정책에 rule:"internal_network", name:<intnet_name4>, ip:<internal_network4>, description<description>로 추가. xpath는 "body.policy_hips_agent.internal_network"이다
* 3초 동안 대기
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
AGENT 정책 최대 추가된 상태에서 일부 룰 변경
\* <devicename>에서 "policy_agent" 설정파일 "/var/policy/policy_agent.json" 정책 "name":<intnet_name2>을 ip:<internal_network2> 로 변경을 한다 xpath는 "body.policy_hips_agent.internal_network.[*].name" 이다
policy_agent.json 암호화 및 정책적용
\* <devicename>에서 "policy_agent" 정책 암호화 CLI:"../exec.sh ./encrypt enc /var/policy/policy_agent.json"를 한다
\* <devicename>에서 "policy_agent" 정책 적용 CLI:"../exec.sh ./hipstest set policy agent /var/policy/policy_agent.json.enc"을 한다
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다


///IPS method serverity blocktime

# P_W_HIPS:<devicename>에 IPS predefined 처리 방법 및 위험도 테스트를 위한 정책을 설정 및 적용한다 (<sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

# P_W_<devicename>에서 IPS predefined 처리 방법 및 위험도 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip>, <sid>, <traffic_dport>, <traffic_protocol>)
\* <devicename>에서 FPG rule 파일 설정(additional 시그니처용)
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 sid73 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip>, dip:"$P_W_DUT.ip", sid:<sid>이다
* 3초 동안 대기
\* P_W_<devicename>에서 hping으로 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip>, dip:"$P_W_DUT.ip", sport:"1024", dport:<traffic_dport>, protocol:<traffic_protocol> 이다
\* 3초 동안 대기

///// IPS use mode action
# P_W_HIPS:<devicename>에 IPS 사용여부 및 모드, 대응방법 테스트를 위한 정책을 설정 및 적용한다 (<engine_mode>, <policy_enable>, <ips_mode>, <sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" 정책 "engine":"mode"의 string type 설정 "mode"을 <engine_mode>로 변경을 한다 xpath는 "body.policy_hips_agent.engine.mode" 이다
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" boolean type 설정 "사용여부"을 <policy_enable>로 한다 xpath는 "body.policy_hips_ips_mgmt.enable" 이다
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" string type 설정 "mode"을 <ips_mode>로 한다 xpath는 "body.policy_hips_ips_mgmt.mode" 이다
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다

# P_W_<devicename>에서 IPS 사용여부 및 모드, 대응방법 테스트의 탐지 트래픽을 발생시킨다 (<traffic_sip>, <sid>)
\* <devicename>에서 FPG rule 파일 설정(기본시그니처용)
* 1초 동안 대기
* P_W_<devicename>에서 FPG로 sid73 탐지 트래픽을 발생 한다 조건은 sip:<traffic_sip>, dip:"$P_W_DUT.ip", sid:<sid>이다
* 3초 동안 대기

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡJUMBO STEP 추가ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
# P_W_HIPS:<devicename>에 JUMBO 테스트를 위한 정책을 설정 및 적용한다 (<sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

#P_W_HIPS:<devicename>에 JUMBO 테스트를 위한 탐지 트래픽을 인가한다.
* <devicename>에서 "cd c:/windows/system32"를 실행한다
* <devicename>에서 "./wget http://192.168.60.44/cfdocs/exampleapp/publish/admin/application.cfmSDFSDFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -t 1 -T 1"를 실행한다

# P_W_HIPS:<devicename>에서 JUMBO 테스트에 대한 이벤트 로그를 확인한다 (<expect_result>, <log_result>, <traffic_sip>, <sid>, <action>, <block_action>, <detect_bytes>, <ndir>)
* P_W_<devicename>에서 "event" JUMBO 로그 처리결과를 확인 한다 예상결과가 <expect_result>이고 로그결과는 <log_result>이다, 추가판단조건 sip:<traffic_sip>, dip:"$P_W_DUT.ip", attackid:<sid>, action:<action>, blockaction:<block_action>, detectbytes<detect_bytes>, ndir<ndir> json 사용

# P_W_<devicename>에서 <hipslogtype> JUMBO 로그 처리결과를 확인 한다 예상결과가 <expect_result>이고 로그결과는 <log_result>이다, 추가판단조건 sip:<traffic_sip>, dip:<traffic_dip>, attackid:<sid>, action:<block>, blockaction:<block_action>, detectbytes<detect_bytes>, ndir<ndir> json 사용
로그파일 확인
* "P_W_DUT"에서 로그파일: "c:/var/log.txt"에서 Json Name:"logresult"으로 생성한다
* Json Name:"logresult"을 보여준다
* Json Name:"expectedlogobj"를 Object Table을 통해 생성한다
    |key    |type   |value |
    |-------|-------|------|
    |src_ip    |string|<traffic_sip>|
    |dst_ip    |string|<traffic_dip>|
    |attackid    |string|<sid>|
    |block    |string|<block>|
    |block_action    |string|<block_action>|
    |detect_bytes    |array|<detect_bytes>|
    |ndir    |string|<ndir>|
* Json Name:"expectedlogobj"을 보여준다
* 판단 기준 값 <expect_result>와 <log_result>가 조건1:"block" or "detect" 조건2:"logcheck"에 부합할 때 Json Name:"logresult"의 XPATH:"[*].request.data.[*]"의 값은 Object value:"expectedlogobj"를 포함하고 부합하지 않으면 포함하지 않는다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡLOG ON OFF 추가 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
# P_W_HIPS:<devicename>에 LOG ON OFF 테스트를 위한 정책을 설정 및 적용한다 (<event_log>, <sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)
\* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" 정책 "internal_network":"0"의 array type 설정 "ip"을 <internal_network_ip>로 변경을 한다 xpath는 "body.policy_hips_agent.internal_network.[0].ip" 이다
\* <devicename>에서 "policy_agent" 설정파일 "c:/var/policy/data/agent.txt" 정책 "event_log":"0"의 array type 설정 "ip"을 <event_log>로 변경을 한다 xpath는 "body.policy_hips_agent.agent_config.event_log.log_filter.[0].HIPS_DETECT" 이다
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "predefined" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.predefined.default.[*].sid" 이다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다

# P_W_HIPS:<hips_dut>에 정책 파일 load 한다1-LOG ON OFF(<hips_detect>)
* Json Name:"policy_hips_ips_mgmt"을 File:"data/product/chw/ips.txt"을 Load해서 생성한다
* Json Name:"policy_hips_ips_mgmt"의 XPATH:"body.policy_hips_ips_mgmt.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_ips_mgmt"을 Device:<hips_dut>의 File:"/var/policy/data/ips.txt"에 저장한다
* Json Name:"policy_hips_fw_mgmt"을 File:"data/product/chw/firewall.txt"을 Load해서 생성한다
* Json Name:"policy_hips_fw_mgmt"의 XPATH:"policy_hips_firewall.enable"의 값을 Boolean value:"true"로 변경한다
* Json Name:"policy_hips_fw_mgmt"을 Device:<hips_dut>의 File:"/var/policy/data/firewall.txt"에 저장한다
* Json Name:"policy_hips_agent"을 File:"data/product/chw/agent.txt"을 Load해서 생성한다
* Json Name:"policy_hips_agent"의 XPATH:"body.policy_hips_agent.agent_config.event_log.log_filter.HIPS_DETECT"의 값을 Boolean value:<hips_detect>로 변경한다
* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/var/policy/data/agent.txt"에 저장한다

# abcde(<hips_detect>)
* Json Name:"policy_hips_agent"을 File:"data/product/chw/agent.txt"을 Load해서 생성한다
* Json Name:"policy_hips_agent"의 XPATH:"body.policy_hips_agent.agent_config.event_log.log_filter.HIPS_DETECT"의 값을 Boolean value:<hips_detect>로 변경한다
\* Json Name:"policy_hips_agent"을 Device:<hips_dut>의 File:"/var/policy/data/agent.txt"에 저장한다



wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
WINDOWS 2008 R2 SP1 

# P_W_HIPS:<devicename>에 IPS 테스트를 위한 설정을 수행한다-windows2008
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/agent.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/ips.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/ips.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall.txt ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다

# P_W_HIPS:<devicename>에 IPS additional 대응방법 테스트를 위한 정책을 설정 및 적용한다 (<sid>, <action>, <block_action>, <severity>, <direction>, <period>, <threshold>, <blockTime>, <raw>, <recommand>, <alarm>)-windows2008
* <devicename>에서 "policy_mgmt" 설정파일 "c:/var/policy/data/ips.txt" 정책 "additional" sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 "body.policy_hips_ips_mgmt.additional.default.[*].sid" 이다-windows2008
* <devicename>에서 "cd c:/var/policy"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
\* EXEC 실행 결과의 Json XPath:"header.result"의 값은 Number value:"0"와 같다
\* <devicename>에서 "cd /usr/local/ahnlab/chipsl/log"를 실행한다
\* <devicename>에서 "event=$(ls |grep ips |head -n 1)"를 실행한다
\* <devicename>에서 "rm -rf $event"를 실행한다

# <devicename>에서 <policyname> 설정파일 <policyfile> 정책 <ips_rule_type> sid:<sid>을 action:<action>, blockAction:<block_action>, severity:<severity>, direction:<direction>, period:<period>, threshold:<threshold>, blockTime:<blockTime>, raw:<raw>, recommand:<recommand>, alarm:<alarm> 로 변경을 한다 xpath는 <xpathval1> 이다-windows2008
* Json Name:<policyname>을 Device:<devicename>의 File:<policyfile>을 Load해서 생성한다
* Json Name:"changeobj"를 Object Table을 통해 생성한다
    |key    |type   |value |
    |-------|-------|------|
    |action    |string|<action>|
    |blockAction    |string|<block_action>|
    |severity    |string|<severity>|
    |direction    |string|<direction>|
    |period    |number|<period>|
    |threshold    |number|<threshold>|
    |blockTime    |number|<blockTime>|
    |raw    |boolean|<raw>|
    |recommendation    |boolean|<recommand>|
    |alarm    |boolean|<alarm>|

* Json Name:<policyname>을 보여준다
* Json Name:<policyname>의 XPATH:<xpathval1>의 값이 Number:<sid>인 상위 Path의 값을 Object value:"changeobj"로 부분 업데이트한다
* Json Name:<policyname>을 보여준다
* Json Name:<policyname>을 Device:<devicename>의 File:<policyfile>에 저장한다

wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
NSEW 시그니처 신규 옵션

# P_W_<devicename>에서 IPS 신규 시그니처 옵션 테스트의 탐지 트래픽을 발생시킨다 (<traffic_protocol1>)
* P_W_<devicename>에서 tcpreplay로 탐지 트래픽을 발생 한다 조건은 dip:"$W_DUT.ip", protocol:<traffic_protocol1> 이다
* 1초 동안 대기

# P_W_<devicename>에서 tcpreplay로 탐지 트래픽을 발생 한다 조건은 dip:<dip>, protocol:<protocol> 이다
탐지 트래픽 발생
* <devicename>에서 protocol:<protocol> dip:<dip> tcpreplay 트래픽 발생
EXEC 실행 결과 코드는 "0"와 같다
* 1초 동안 대기

# P_W_<devicename>에서 OS별 LOG를 확인한다 (<os>, <log_file>)
* P_W_<devicename>에서 LOG를 확인한다 확인 조건은 os:<os>, log_file:<log_file> 이다
* 1초 동안 대기

# P_W_<devicename>에서 LOG를 확인한다 확인 조건은 os:<os>, log_file:<log_file> 이다
* <devicename>에서 os:<os> log_file:<log_file> LOG 확인
* 1초 동안 대기

# P_W_<devicename>에서 Host Sweep 테스트의 탐지 트래픽을 발생시킨다 (<dip>, <traffic_protocol1>)
* P_W_<devicename>에서 Host Sweep 탐지 트래픽을 발생 한다 조건은 dip:<dip>, protocol:<traffic_protocol1> 이다

# P_W_<devicename>에서 Host Sweep 탐지 트래픽을 발생 한다 조건은 dip:<dip>, protocol:<protocol> 이다
탐지 트래픽 발생
* <devicename>에서 protocol:<protocol> dip:<dip> 트래픽 발생
EXEC 실행 결과 코드는 "0"와 같다

# P_W_HIPS:<hips_dut>에 CHW 패키지를 위치시킨다.
\* <hips_dut>에서 "mkdir c:/var"를 실행한다
* <hips_dut>에서 "cd c:/var"를 실행한다
\* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/policy.zip -OutFile c:/var/policy.zip"를 실행한다
\* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/policy.zip"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/hipstest.exe -OutFile c:/var/hipstest.exe"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/hipstest.exe"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/setup.zip -OutFile c:/var/setup.zip"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/setup.zip"를 실행한다
* <hips_dut>에서 "ls c:/var/ -Name"를 실행한다
* EXEC 실행 결과 메시지는 "policy.zip"를 포함한다
* EXEC 실행 결과 메시지는 "hipstest.exe"를 포함한다
* EXEC 실행 결과 메시지는 "setup.zip"를 포함한다
* <hips_dut>에서 "unzip ./policy.zip"를 Timeout:"30"로 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "unzip ./setup.zip"를 Timeout:"30"로 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cp hipstest.exe c:/var/policy/hipstest.exe"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "ls c:/var/policy -Name"를 실행한다
* EXEC 실행 결과 메시지는 "data"를 포함한다
* EXEC 실행 결과 메시지는 "work"를 포함한다
* EXEC 실행 결과 메시지는 "hipstest.exe"를 포함한다
* <hips_dut>에서 "cp c:/var/policy/data/agent.txt c:/var/policy/data/agent_org.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cp c:/var/policy/data/firewall.txt c:/var/policy/data/firewall_org.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cp c:/var/policy/data/ips.txt c:/var/policy/data/ips_org.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
\* <hips_dut>에서 "cd c:/var"를 실행한다
* <hips_dut>에서 "./hips_setup.exe -s; sleep 60"를 Timeout:"65"로 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
\* 30초 동안 대기


# P_W_HIPS:<hips_dut>에 CHW 패키지를 위치시킨다2.
* <hips_dut>에서 "cd c:/'Program Files'/AhnLab/EPC"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/EpcLogV.zip -OutFile c:/'Program Files'/AhnLab/EPC/EpcLogV.zip"를 실행한다
* <hips_dut>에서 "unzip ./EpcLogV.zip"를 실행한다
* <hips_dut>에서 "cd c:/'Program Files'/AhnLab/EPC/EpcLogV"를 실행한다
* <hips_dut>에서 "mv agent5.slp c:/'Program Files'/AhnLab/EPC/agent5.slp"를 실행한다
* <hips_dut>에서 "mv agent5platform.slp c:/'Program Files'/AhnLab/EPC/agent5platform.slp"를 실행한다
* <hips_dut>에서 "mv EDRClient.slp c:/'Program Files'/AhnLab/EPC/EDRClient.slp"를 실행한다
* <hips_dut>에서 "mv EpcLogV.exe c:/'Program Files'/AhnLab/EPC/EpcLogV.exe"를 실행한다

# P_W_HIPS:<hips_dut>에 CHW 삭제시킨다.
* <hips_dut>에서 "cd c:/ProgramData/Microsoft/Windows/'Start Menu'/Programs/'AhnLab Host IPS'"를 실행한다
* <hips_dut>에서 "cp './AhnLab Host IPS 제거.lnk' c:/var/"를 실행한다
* <hips_dut>에서 "cd 'c:/var'"를 실행한다
* <hips_dut>에서 "& './AhnLab Host IPS 제거.lnk' /s"를 실행한다
* 15초 동안 대기
* <hips_dut>에서 "rm 'C:/var/AhnLab Host IPS 제거.lnk'"를 실행한다
* <hips_dut>에서 "rd c:/'Program Files'/AhnLab/EPC/EpcLogV.exe -Force"를 실행한다
* <hips_dut>에서 "rd c:/'Program Files'/AhnLab/EPC/agent5.slp -Force"를 실행한다
* <hips_dut>에서 "rd c:/'Program Files'/AhnLab/EPC/agent5platform.slp -Force"를 실행한다
* <hips_dut>에서 "rd c:/'Program Files'/AhnLab/EPC/EDRClient.slp -Force"를 실행한다
* <hips_dut>에서 "rd c:/'Program Files'/AhnLab/EPC/EpcLogV -Force"를 실행한다
* <hips_dut>에서 "rd c:/'Program Files'/AhnLab/EPC/EpcLogV.zip -Force"를 실행한다
* <hips_dut>에서 "rd c:/var/hips_setup.exe -Force"를 실행한다
* <hips_dut>에서 "rd c:/var/hipstest.exe -Force"를 실행한다
* <hips_dut>에서 "rd c:/var/MpSetup.ini -Force"를 실행한다
* <hips_dut>에서 "rd c:/var/MpSetup.ini.ahc -Force"를 실행한다
* <hips_dut>에서 "rd c:/var/policy.zip -Force"를 실행한다
* <hips_dut>에서 "rd c:/var/setup.zip -Force"를 실행한다
\* <hips_dut>에서 "rd c:/var/policy -Force"를 실행한다

# <hips_dut>에서 agent 설정 변경 - 롤백 패치서버
* <hips_dut>에서 "cd c:/var"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
\ 01_agent_default_ip_u.txt는 192.168.190.9 롤백패치 서버를 업데이트 서버로 지정하는 agent config파일, 업데이트 서버 변경용.
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_r.txt -OutFile c:/var/01_agent_default_ip_r.txt"를 실행한다
\* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_r.txt"를 실행한다
\* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cp 01_agent_default_ip_r.txt c:/var/policy/data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기
* <hips_dut>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest file jsonverify ./data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest file plyenc ./data/01_agent_default_ip.txt ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기
\* <hips_dut>에서 "./hipstest file jsondiff ./data/01_agent_default_ip.txt ./work/hipstest_result.txt"를 실행한다
\* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest get policy agent"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기

# <hips_dut>에서 롤백 업데이트 수행
* <hips_dut>에서 "./hipstest set cmd update"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 60초 동안 대기

# <hips_dut>에서 롤백 업데이트 수행결과 확인
* <hips_dut>에서 "cat c:/'Program Files'/AhnLab/EPC/HIPS/bldinfo.ini"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* EXEC 실행 결과 메시지는 "1.0.8."를 포함한다

# <hips_dut>에서 agent 설정 변경 - 업데이트 패치서버
\ 01_agent_default_ip_u.txt는 192.168.190.1 업데이트 패치 서버를 업데이트 서버로 지정하는 agent config파일, 업데이트 서버 변경용.
* <hips_dut>에서 "cd c:/var"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_u.txt -OutFile c:/var/01_agent_default_ip_u.txt"를 실행한다
\* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_u.txt"를 실행한다
\* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cp 01_agent_default_ip_u.txt c:/var/policy/data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기
* <hips_dut>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest file jsonverify ./data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest file plyenc ./data/01_agent_default_ip.txt ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기
\* <hips_dut>에서 "./hipstest file jsondiff ./data/01_agent_default_ip.txt ./work/hipstest_result.txt"를 실행한다
\* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest get policy agent"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기

# <hips_dut>에서 패치 업데이트 수행
* <hips_dut>에서 "./hipstest set cmd update"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 60초 동안 대기

# <hips_dut>에서 패치 업데이트 수행결과 확인
* <hips_dut>에서 "cat c:/'Program Files'/AhnLab/EPC/HIPS/bldinfo.ini"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* EXEC 실행 결과 메시지는 "1.0.9."를 포함한다

# <devicename>에서 policy 1회 셋업
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/agent.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/ips.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/ips.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall.txt ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다

# <devicename>에서 policy 초기화
* <devicename>에서 "cp c:/var/policy/data/agent_org.txt c:/var/policy/data/agent.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <devicename>에서 "cp c:/var/policy/data/firewall_org.txt c:/var/policy/data/firewall.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <devicename>에서 "cp c:/var/policy/data/ips_org.txt c:/var/policy/data/ips.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/agent.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/ips.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/ips.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall.txt ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다

# <devicename>에서 엔진구동 여부 확인
* <devicename>에서 "sc.exe query ansf"를 Timeout:"10"로 실행한다
* EXEC 실행 결과 메시지는 "RUNNING"를 포함한다

wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
\EXEC 실행결과 1이 true인 케이스용
wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww

# P_W_HIPS:<hips_dut>에 CHW 패키지를 위치시킨다.for win2016
\* <hips_dut>에서 "mkdir c:/var"를 실행한다
* <hips_dut>에서 "cd c:/var"를 실행한다
\* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/policy.zip -OutFile c:/var/policy.zip"를 실행한다
\* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/policy.zip"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/hipstest.exe -OutFile c:/var/hipstest.exe"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/hipstest.exe"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/setup.zip -OutFile c:/var/setup.zip"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/setup.zip"를 실행한다
* <hips_dut>에서 "ls c:/var/ -Name"를 실행한다
* EXEC 실행 결과 메시지는 "policy.zip"를 포함한다
* EXEC 실행 결과 메시지는 "hipstest.exe"를 포함한다
* EXEC 실행 결과 메시지는 "setup.zip"를 포함한다
* <hips_dut>에서 "unzip ./policy.zip"를 Timeout:"30"로 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "unzip ./setup.zip"를 Timeout:"30"로 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "cp hipstest.exe c:/var/policy/hipstest.exe"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "ls c:/var/policy -Name"를 실행한다
* EXEC 실행 결과 메시지는 "data"를 포함한다
* EXEC 실행 결과 메시지는 "work"를 포함한다
* EXEC 실행 결과 메시지는 "hipstest.exe"를 포함한다
* <hips_dut>에서 "cp c:/var/policy/data/agent.txt c:/var/policy/data/agent_org.txt"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "cp c:/var/policy/data/firewall.txt c:/var/policy/data/firewall_org.txt"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "cp c:/var/policy/data/ips.txt c:/var/policy/data/ips_org.txt"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
\* <hips_dut>에서 "cd c:/var"를 실행한다
* <hips_dut>에서 "./hips_setup.exe -s; sleep 60"를 Timeout:"65"로 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
\* 30초 동안 대기

# <hips_dut>에서 agent 설정 변경 - 롤백 패치서버for win2016
* <hips_dut>에서 "cd c:/var"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
\ 01_agent_default_ip_u.txt는 192.168.190.9 롤백패치 서버를 업데이트 서버로 지정하는 agent config파일, 업데이트 서버 변경용.
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_r.txt -OutFile c:/var/01_agent_default_ip_r.txt"를 실행한다
\* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_r.txt"를 실행한다
\* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "cp 01_agent_default_ip_r.txt c:/var/policy/data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* 10초 동안 대기
* <hips_dut>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "./hipstest file jsonverify ./data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "./hipstest file plyenc ./data/01_agent_default_ip.txt ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* 10초 동안 대기
\* <hips_dut>에서 "./hipstest file jsondiff ./data/01_agent_default_ip.txt ./work/hipstest_result.txt"를 실행한다
\* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "./hipstest get policy agent"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* 10초 동안 대기

# <hips_dut>에서 롤백 업데이트 수행for win2016
* <hips_dut>에서 "./hipstest set cmd update"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* 60초 동안 대기

# <hips_dut>에서 롤백 업데이트 수행결과 확인for win2016
* <hips_dut>에서 "cat c:/'Program Files'/AhnLab/EPC/HIPS/bldinfo.ini"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* EXEC 실행 결과 메시지는 "1.0.8."를 포함한다

# <hips_dut>에서 agent 설정 변경 - 업데이트 패치서버for win2016
\ 01_agent_default_ip_u.txt는 192.168.190.1 업데이트 패치 서버를 업데이트 서버로 지정하는 agent config파일, 업데이트 서버 변경용.
* <hips_dut>에서 "cd c:/var"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_u.txt -OutFile c:/var/01_agent_default_ip_u.txt"를 실행한다
\* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_u.txt"를 실행한다
\* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "cp 01_agent_default_ip_u.txt c:/var/policy/data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* 10초 동안 대기
* <hips_dut>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "./hipstest file jsonverify ./data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "./hipstest file plyenc ./data/01_agent_default_ip.txt ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* 10초 동안 대기
\* <hips_dut>에서 "./hipstest file jsondiff ./data/01_agent_default_ip.txt ./work/hipstest_result.txt"를 실행한다
\* EXEC 실행 결과 코드는 "1"와 같다
* <hips_dut>에서 "./hipstest get policy agent"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* 10초 동안 대기

# <hips_dut>에서 패치 업데이트 수행for win2016
* <hips_dut>에서 "./hipstest set cmd update"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* 60초 동안 대기

# <hips_dut>에서 패치 업데이트 수행결과 확인for win2016
* <hips_dut>에서 "cat c:/'Program Files'/AhnLab/EPC/HIPS/bldinfo.ini"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* EXEC 실행 결과 메시지는 "1.0.9."를 포함한다

# <devicename>에서 policy 1회 셋업for win2016
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/agent.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/ips.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/ips.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall.txt ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다

# <devicename>에서 policy 초기화for win2016
* <devicename>에서 "cp c:/var/policy/data/agent_org.txt c:/var/policy/data/agent.txt"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <devicename>에서 "cp c:/var/policy/data/firewall_org.txt c:/var/policy/data/firewall.txt"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <devicename>에서 "cp c:/var/policy/data/ips_org.txt c:/var/policy/data/ips.txt"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/agent.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/agent.txt ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/agent.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy agent"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/ips.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/ips.txt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest set policy mgmt ./work/ips.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/ips.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy mgmt"를 실행한다
* <devicename>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "1"와 같다
* <devicename>에서 "./hipstest file jsonverify ./data/firewall.txt"를 실행한다
* <devicename>에서 "./hipstest file plyenc ./data/firewall.txt ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest set policy fw ./work/firewall.dat"를 실행한다
* <devicename>에서 "./hipstest file jsondiff ./data/firewall.txt ./work/hipstest_result.txt"를 실행한다
* <devicename>에서 "./hipstest get policy fw"를 실행한다

wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
for 20H2
wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww

# P_W_HIPS:<hips_dut>에 CHW 패키지를 위치시킨다.for 20H2
\* <hips_dut>에서 "mkdir c:/var"를 실행한다
* <hips_dut>에서 "cd c:/var"를 실행한다
\* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/policy.zip -OutFile c:/var/policy.zip"를 실행한다
\* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/policy.zip"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/hipstest.exe -OutFile c:/var/hipstest.exe"를 실행한다
\* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/hipstest.exe"를 실행한다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/setup.zip -OutFile c:/var/setup.zip"를 실행한다
\* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/setup.zip"를 실행한다
* <hips_dut>에서 "ls c:/var/ -Name"를 실행한다
* EXEC 실행 결과 메시지는 "policy.zip"를 포함한다
* EXEC 실행 결과 메시지는 "hipstest.exe"를 포함한다
* EXEC 실행 결과 메시지는 "setup.zip"를 포함한다
* <hips_dut>에서 "unzip ./policy.zip"를 Timeout:"30"로 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "unzip ./setup.zip"를 Timeout:"30"로 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cp hipstest.exe c:/var/policy/hipstest.exe"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "ls c:/var/policy -Name"를 실행한다
* EXEC 실행 결과 메시지는 "data"를 포함한다
* EXEC 실행 결과 메시지는 "work"를 포함한다
* EXEC 실행 결과 메시지는 "hipstest.exe"를 포함한다
* <hips_dut>에서 "cp c:/var/policy/data/agent.txt c:/var/policy/data/agent_org.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cp c:/var/policy/data/firewall.txt c:/var/policy/data/firewall_org.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cp c:/var/policy/data/ips.txt c:/var/policy/data/ips_org.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
\* <hips_dut>에서 "cd c:/var"를 실행한다
* <hips_dut>에서 "./hips_setup.exe -s; sleep 60"를 Timeout:"65"로 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
\* 30초 동안 대기


# <hips_dut>에서 agent 설정 변경 - 롤백 패치서버for 20H2
* <hips_dut>에서 "cd c:/var"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
\ 01_agent_default_ip_u.txt는 192.168.190.9 롤백패치 서버를 업데이트 서버로 지정하는 agent config파일, 업데이트 서버 변경용.
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_r.txt -OutFile c:/var/01_agent_default_ip_r.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
\* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_r.txt"를 실행한다
\* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cp 01_agent_default_ip_r.txt c:/var/policy/data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기
* <hips_dut>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest file jsonverify ./data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest file plyenc ./data/01_agent_default_ip.txt ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기
\* <hips_dut>에서 "./hipstest file jsondiff ./data/01_agent_default_ip.txt ./work/hipstest_result.txt"를 실행한다
\* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest get policy agent"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기

# <hips_dut>에서 agent 설정 변경 - 업데이트 패치서버for 20H2
\ 01_agent_default_ip_u.txt는 192.168.190.1 업데이트 패치 서버를 업데이트 서버로 지정하는 agent config파일, 업데이트 서버 변경용.
* <hips_dut>에서 "cd c:/var"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_u.txt -OutFile c:/var/01_agent_default_ip_u.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
\* <hips_dut>에서 "wget http://192.168.181.210/downloadn/HIPS/01_agent_default_ip_u.txt"를 실행한다
\* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "cp 01_agent_default_ip_u.txt c:/var/policy/data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기
* <hips_dut>에서 "cd c:/var/policy"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest file jsonverify ./data/01_agent_default_ip.txt"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest file plyenc ./data/01_agent_default_ip.txt ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest set policy agent ./work/agent.dat"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기
\* <hips_dut>에서 "./hipstest file jsondiff ./data/01_agent_default_ip.txt ./work/hipstest_result.txt"를 실행한다
\* EXEC 실행 결과 코드는 "0"와 같다
* <hips_dut>에서 "./hipstest get policy agent"를 실행한다
* EXEC 실행 결과 코드는 "0"와 같다
* 10초 동안 대기